// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class ProSteamAccountTypeQueryBuilder : GraphQlQueryBuilder<ProSteamAccountTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "realName" },
                new FieldMetadata { Name = "fantasyRole", IsComplex = true },
                new FieldMetadata { Name = "teamId" },
                new FieldMetadata { Name = "sponsor" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "isPro" },
                new FieldMetadata { Name = "totalEarnings" },
                new FieldMetadata { Name = "birthday", IsComplex = true },
                new FieldMetadata { Name = "romanizedRealName" },
                new FieldMetadata { Name = "roles", IsComplex = true },
                new FieldMetadata { Name = "aliases", IsComplex = true },
                new FieldMetadata { Name = "statuses", IsComplex = true },
                new FieldMetadata { Name = "twitterLink" },
                new FieldMetadata { Name = "twitchLink" },
                new FieldMetadata { Name = "instagramLink" },
                new FieldMetadata { Name = "vkLink" },
                new FieldMetadata { Name = "youTubeLink" },
                new FieldMetadata { Name = "facebookLink" },
                new FieldMetadata { Name = "weiboLink" },
                new FieldMetadata { Name = "signatureHeroes", IsComplex = true },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "countries", IsComplex = true },
                new FieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ProSteamAccountType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProSteamAccountTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProSteamAccountTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ProSteamAccountTypeQueryBuilder WithRealName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("realName", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRealName()
        {
            return ExceptField("realName");
        }

        public ProSteamAccountTypeQueryBuilder WithFantasyRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fantasyRole", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptFantasyRole()
        {
            return ExceptField("fantasyRole");
        }

        public ProSteamAccountTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public ProSteamAccountTypeQueryBuilder WithSponsor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sponsor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptSponsor()
        {
            return ExceptField("sponsor");
        }

        public ProSteamAccountTypeQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public ProSteamAccountTypeQueryBuilder WithIsPro(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPro", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptIsPro()
        {
            return ExceptField("isPro");
        }

        public ProSteamAccountTypeQueryBuilder WithTotalEarnings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalEarnings", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTotalEarnings()
        {
            return ExceptField("totalEarnings");
        }

        public ProSteamAccountTypeQueryBuilder WithBirthday(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("birthday", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptBirthday()
        {
            return ExceptField("birthday");
        }

        public ProSteamAccountTypeQueryBuilder WithRomanizedRealName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("romanizedRealName", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRomanizedRealName()
        {
            return ExceptField("romanizedRealName");
        }

        public ProSteamAccountTypeQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public ProSteamAccountTypeQueryBuilder WithAliases(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aliases", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptAliases()
        {
            return ExceptField("aliases");
        }

        public ProSteamAccountTypeQueryBuilder WithStatuses(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statuses", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptStatuses()
        {
            return ExceptField("statuses");
        }

        public ProSteamAccountTypeQueryBuilder WithTwitterLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitterLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTwitterLink()
        {
            return ExceptField("twitterLink");
        }

        public ProSteamAccountTypeQueryBuilder WithTwitchLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitchLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTwitchLink()
        {
            return ExceptField("twitchLink");
        }

        public ProSteamAccountTypeQueryBuilder WithInstagramLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("instagramLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptInstagramLink()
        {
            return ExceptField("instagramLink");
        }

        public ProSteamAccountTypeQueryBuilder WithVkLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("vkLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptVkLink()
        {
            return ExceptField("vkLink");
        }

        public ProSteamAccountTypeQueryBuilder WithYouTubeLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("youTubeLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptYouTubeLink()
        {
            return ExceptField("youTubeLink");
        }

        public ProSteamAccountTypeQueryBuilder WithFacebookLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facebookLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptFacebookLink()
        {
            return ExceptField("facebookLink");
        }

        public ProSteamAccountTypeQueryBuilder WithWeiboLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weiboLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptWeiboLink()
        {
            return ExceptField("weiboLink");
        }

        public ProSteamAccountTypeQueryBuilder WithSignatureHeroes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signatureHeroes", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptSignatureHeroes()
        {
            return ExceptField("signatureHeroes");
        }

        public ProSteamAccountTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public ProSteamAccountTypeQueryBuilder WithCountries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countries", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptCountries()
        {
            return ExceptField("countries");
        }

        public ProSteamAccountTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }
    }
}
