// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerBreakdownTypeQueryBuilder : GraphQlQueryBuilder<PlayerBreakdownTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "isStatsMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "rankMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "lobbyMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "gameModeMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "factionMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "regionMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "laneMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "roleMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "partyMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "impMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "durationMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "heroAttributeMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "dayOfWeekMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "timeOfDayMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "weekEndMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerBreakdownType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBreakdownTypeQueryBuilder WithMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PlayerBreakdownTypeQueryBuilder WithIsStatsMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isStatsMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptIsStatsMatches()
        {
            return ExceptField("isStatsMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRankMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rankMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRankMatches()
        {
            return ExceptField("rankMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithLobbyMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lobbyMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptLobbyMatches()
        {
            return ExceptField("lobbyMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithGameModeMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gameModeMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptGameModeMatches()
        {
            return ExceptField("gameModeMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithFactionMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("factionMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptFactionMatches()
        {
            return ExceptField("factionMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRegionMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("regionMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRegionMatches()
        {
            return ExceptField("regionMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithLaneMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("laneMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptLaneMatches()
        {
            return ExceptField("laneMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRoleMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roleMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRoleMatches()
        {
            return ExceptField("roleMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithPartyMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("partyMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptPartyMatches()
        {
            return ExceptField("partyMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithImpMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("impMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptImpMatches()
        {
            return ExceptField("impMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithDurationMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("durationMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptDurationMatches()
        {
            return ExceptField("durationMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithHeroAttributeMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroAttributeMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptHeroAttributeMatches()
        {
            return ExceptField("heroAttributeMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithDayOfWeekMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dayOfWeekMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptDayOfWeekMatches()
        {
            return ExceptField("dayOfWeekMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithTimeOfDayMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("timeOfDayMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptTimeOfDayMatches()
        {
            return ExceptField("timeOfDayMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithWeekEndMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("weekEndMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptWeekEndMatches()
        {
            return ExceptField("weekEndMatches");
        }
    }
}
