// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerCoachingLeaderboardTypeQueryBuilder : GraphQlQueryBuilder<PlayerCoachingLeaderboardTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "rating" },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "firstMatchDateTime", IsComplex = true },
                new FieldMetadata { Name = "lastMatchDateTime", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerCoachingLeaderboardType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerCoachingLeaderboardTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rating", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptRating()
        {
            return ExceptField("rating");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }
    }
}
