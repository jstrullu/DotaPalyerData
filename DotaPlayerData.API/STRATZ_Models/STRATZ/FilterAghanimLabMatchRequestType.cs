// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class FilterAghanimLabMatchRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _didWin;
        private InputPropertyInfo _depth;
        private InputPropertyInfo _difficulty;
        private InputPropertyInfo _minDepth;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _createdBeforeDateTime;
        private InputPropertyInfo _createdAfterDateTime;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _orderDirection;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;
        private InputPropertyInfo _seasonId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> MatchIds
        {
            get { return (QueryBuilderParameter<IList<object>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DidWin
        {
            get { return (QueryBuilderParameter<bool?>)_didWin.Value; }
            set { _didWin = new InputPropertyInfo { Name = "didWin", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Depth
        {
            get { return (QueryBuilderParameter<byte?>)_depth.Value; }
            set { _depth = new InputPropertyInfo { Name = "depth", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AghanimLabMatchDifficultyEnum?>))]
        #endif
        public QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> Difficulty
        {
            get { return (QueryBuilderParameter<AghanimLabMatchDifficultyEnum?>)_difficulty.Value; }
            set { _difficulty = new InputPropertyInfo { Name = "difficulty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> MinDepth
        {
            get { return (QueryBuilderParameter<byte?>)_minDepth.Value; }
            set { _minDepth = new InputPropertyInfo { Name = "minDepth", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> RegionIds
        {
            get { return (QueryBuilderParameter<IList<object>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedBeforeDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdBeforeDateTime.Value; }
            set { _createdBeforeDateTime = new InputPropertyInfo { Name = "createdBeforeDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedAfterDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdAfterDateTime.Value; }
            set { _createdAfterDateTime = new InputPropertyInfo { Name = "createdAfterDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterAghanimLabMatchOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterAghanimLabMatchOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterAghanimLabMatchOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> OrderDirection
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_orderDirection.Value; }
            set { _orderDirection = new InputPropertyInfo { Name = "orderDirection", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> SeasonId
        {
            get { return (QueryBuilderParameter<byte?>)_seasonId.Value; }
            set { _seasonId = new InputPropertyInfo { Name = "seasonId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_didWin.Name != null) yield return _didWin;
            if (_depth.Name != null) yield return _depth;
            if (_difficulty.Name != null) yield return _difficulty;
            if (_minDepth.Name != null) yield return _minDepth;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_createdBeforeDateTime.Name != null) yield return _createdBeforeDateTime;
            if (_createdAfterDateTime.Name != null) yield return _createdAfterDateTime;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_orderDirection.Name != null) yield return _orderDirection;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
            if (_seasonId.Name != null) yield return _seasonId;
        }
    }
}
