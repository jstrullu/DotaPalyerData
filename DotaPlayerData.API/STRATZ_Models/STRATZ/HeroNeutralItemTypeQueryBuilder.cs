// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroNeutralItemTypeQueryBuilder : GraphQlQueryBuilder<HeroNeutralItemTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId" },
                new FieldMetadata { Name = "week" },
                new FieldMetadata { Name = "bracketBasicIds" },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "itemId" },
                new FieldMetadata { Name = "item", IsComplex = true, QueryBuilderType = typeof(ItemTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCount", IsComplex = true },
                new FieldMetadata { Name = "winCount", IsComplex = true },
                new FieldMetadata { Name = "equippedMatchCount", IsComplex = true },
                new FieldMetadata { Name = "equippedMatchWinCount", IsComplex = true }
            };

        protected override string TypeName { get { return "HeroNeutralItemType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroNeutralItemTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroNeutralItemTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroNeutralItemTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroNeutralItemTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroNeutralItemTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public HeroNeutralItemTypeQueryBuilder WithItem(ItemTypeQueryBuilder itemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item", alias, itemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptItem()
        {
            return ExceptField("item");
        }

        public HeroNeutralItemTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithEquippedMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("equippedMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptEquippedMatchCount()
        {
            return ExceptField("equippedMatchCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithEquippedMatchWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("equippedMatchWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptEquippedMatchWinCount()
        {
            return ExceptField("equippedMatchWinCount");
        }
    }
}
