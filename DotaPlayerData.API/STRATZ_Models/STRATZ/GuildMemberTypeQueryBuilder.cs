// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class GuildMemberTypeQueryBuilder : GraphQlQueryBuilder<GuildMemberTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "guildId" },
                new FieldMetadata { Name = "steamAccountId" },
                new FieldMetadata { Name = "joinDateTime", IsComplex = true },
                new FieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "GuildMemberType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GuildMemberTypeQueryBuilder WithGuildId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("guildId", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptGuildId()
        {
            return ExceptField("guildId");
        }

        public GuildMemberTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public GuildMemberTypeQueryBuilder WithJoinDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("joinDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptJoinDateTime()
        {
            return ExceptField("joinDateTime");
        }

        public GuildMemberTypeQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public GuildMemberTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public GuildMemberTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public GuildMemberTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public GuildMemberTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }
}
