// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchReplayUploadHeroSummaryTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadHeroSummaryTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "winCountWith" },
                new FieldMetadata { Name = "winCountAgainst" },
                new FieldMetadata { Name = "matchCountWith" },
                new FieldMetadata { Name = "matchCountAgainst" },
                new FieldMetadata { Name = "banCountWith" },
                new FieldMetadata { Name = "banCountAgainst" },
                new FieldMetadata { Name = "duos", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadHeroDuoSummaryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadHeroSummaryType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithWinCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptWinCountWith()
        {
            return ExceptField("winCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithWinCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptWinCountAgainst()
        {
            return ExceptField("winCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithMatchCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptMatchCountAgainst()
        {
            return ExceptField("matchCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithBanCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptBanCountWith()
        {
            return ExceptField("banCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithBanCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptBanCountAgainst()
        {
            return ExceptField("banCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithDuos(MatchReplayUploadHeroDuoSummaryTypeQueryBuilder matchReplayUploadHeroDuoSummaryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("duos", alias, matchReplayUploadHeroDuoSummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptDuos()
        {
            return ExceptField("duos");
        }
    }
}
