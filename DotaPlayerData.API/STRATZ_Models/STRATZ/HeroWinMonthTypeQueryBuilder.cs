// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroWinMonthTypeQueryBuilder : GraphQlQueryBuilder<HeroWinMonthTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "month", IsComplex = true },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "durationMinute", IsComplex = true },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinMonthType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinMonthTypeQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public HeroWinMonthTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinMonthTypeQueryBuilder WithDurationMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptDurationMinute()
        {
            return ExceptField("durationMinute");
        }

        public HeroWinMonthTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinMonthTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }
}
