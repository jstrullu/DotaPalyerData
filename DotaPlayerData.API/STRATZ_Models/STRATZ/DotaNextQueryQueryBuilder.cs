// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DotaNextQueryQueryBuilder : GraphQlQueryBuilder<DotaNextQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "enemy", IsComplex = true, QueryBuilderType = typeof(DotaNextWithAllyTypeQueryBuilder) },
                new FieldMetadata { Name = "ally", IsComplex = true, QueryBuilderType = typeof(DotaNextWithAllyTypeQueryBuilder) },
                new FieldMetadata { Name = "playerHero", IsComplex = true, QueryBuilderType = typeof(MatchPlayerItemPurchaseEventTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaNextQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaNextQueryQueryBuilder WithEnemy(DotaNextWithAllyTypeQueryBuilder dotaNextWithAllyTypeQueryBuilder, QueryBuilderParameter<IEnumerable<object>> steamAccountIds, QueryBuilderParameter<object> matchSteamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchSteamAccountId", ArgumentValue = matchSteamAccountId} );
            return WithObjectField("enemy", alias, dotaNextWithAllyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptEnemy()
        {
            return ExceptField("enemy");
        }

        public DotaNextQueryQueryBuilder WithAlly(DotaNextWithAllyTypeQueryBuilder dotaNextWithAllyTypeQueryBuilder, QueryBuilderParameter<IEnumerable<object>> steamAccountIds, QueryBuilderParameter<object> matchSteamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchSteamAccountId", ArgumentValue = matchSteamAccountId} );
            return WithObjectField("ally", alias, dotaNextWithAllyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptAlly()
        {
            return ExceptField("ally");
        }

        public DotaNextQueryQueryBuilder WithPlayerHero(QueryBuilderParameter<object> steamAccountIds, QueryBuilderParameter<object> gameModeIds, QueryBuilderParameter<object> lobbyTypeIds, QueryBuilderParameter<int> limitByItemIds, QueryBuilderParameter<object> startDateTime, QueryBuilderParameter<object> heroId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lobbyTypeIds", ArgumentValue = lobbyTypeIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limitByItemIds", ArgumentValue = limitByItemIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDateTime", ArgumentValue = startDateTime} );
            return WithScalarField("playerHero", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptPlayerHero()
        {
            return ExceptField("playerHero");
        }
    }
}
