// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class BattlepassPredictionTournamentTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionTournamentTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroesPicked", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "heroesBanned", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "totalKills", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "longestGame", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "soloKills", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "soloDeaths", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "soloAssists", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new FieldMetadata { Name = "soloGoldPerMinute", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "BattlepassPredictionTournamentType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionTournamentTypeQueryBuilder WithHeroesPicked(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroesPicked", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptHeroesPicked()
        {
            return ExceptField("heroesPicked");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithHeroesBanned(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroesBanned", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptHeroesBanned()
        {
            return ExceptField("heroesBanned");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithTotalKills(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalKills", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptTotalKills()
        {
            return ExceptField("totalKills");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithLongestGame(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("longestGame", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptLongestGame()
        {
            return ExceptField("longestGame");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloKills(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloKills", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloKills()
        {
            return ExceptField("soloKills");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloDeaths(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloDeaths", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloDeaths()
        {
            return ExceptField("soloDeaths");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloAssists(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloAssists", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloAssists()
        {
            return ExceptField("soloAssists");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloGoldPerMinute(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloGoldPerMinute", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloGoldPerMinute()
        {
            return ExceptField("soloGoldPerMinute");
        }
    }
}
