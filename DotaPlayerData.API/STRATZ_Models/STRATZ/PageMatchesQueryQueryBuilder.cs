// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PageMatchesQueryQueryBuilder : GraphQlQueryBuilder<PageMatchesQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchesStatsHour", IsComplex = true, QueryBuilderType = typeof(MatchesHourTypeQueryBuilder) },
                new FieldMetadata { Name = "matchesStatsDay", IsComplex = true, QueryBuilderType = typeof(MatchesDayTypeQueryBuilder) },
                new FieldMetadata { Name = "matchesStatsWeek", IsComplex = true, QueryBuilderType = typeof(MatchesWeekTypeQueryBuilder) },
                new FieldMetadata { Name = "matchesStatsMonth", IsComplex = true, QueryBuilderType = typeof(MatchesMonthTypeQueryBuilder) },
                new FieldMetadata { Name = "matchesStatsGameVersion", IsComplex = true, QueryBuilderType = typeof(MatchesGameVersionTypeQueryBuilder) },
                new FieldMetadata { Name = "matchmakingStats", IsComplex = true, QueryBuilderType = typeof(MatchmakingStatsTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageMatchesQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageMatchesQueryQueryBuilder WithMatchesStatsHour(MatchesHourTypeQueryBuilder matchesHourTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket?>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType?>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType?>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsHour", alias, matchesHourTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsHour()
        {
            return ExceptField("matchesStatsHour");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsDay(MatchesDayTypeQueryBuilder matchesDayTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket?>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType?>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType?>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsDay", alias, matchesDayTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsDay()
        {
            return ExceptField("matchesStatsDay");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsWeek(MatchesWeekTypeQueryBuilder matchesWeekTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket?>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType?>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType?>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsWeek", alias, matchesWeekTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsWeek()
        {
            return ExceptField("matchesStatsWeek");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsMonth(MatchesMonthTypeQueryBuilder matchesMonthTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket?>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType?>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType?>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsMonth", alias, matchesMonthTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsMonth()
        {
            return ExceptField("matchesStatsMonth");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsGameVersion(MatchesGameVersionTypeQueryBuilder matchesGameVersionTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket?>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType?>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType?>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsGameVersion", alias, matchesGameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsGameVersion()
        {
            return ExceptField("matchesStatsGameVersion");
        }

        public PageMatchesQueryQueryBuilder WithMatchmakingStats(MatchmakingStatsTypeQueryBuilder matchmakingStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchmakingStats", alias, matchmakingStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageMatchesQueryQueryBuilder ExceptMatchmakingStats()
        {
            return ExceptField("matchmakingStats");
        }
    }
}
