// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerPlayedWithProPlayerTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProPlayerTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "steamId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "with", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerMatchTypeQueryBuilder) },
                new FieldMetadata { Name = "vs", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProPlayerType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithSteamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptSteamId()
        {
            return ExceptField("steamId");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithWith(PlayerPlayedWithProPlayerMatchTypeQueryBuilder playerPlayedWithProPlayerMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("with", alias, playerPlayedWithProPlayerMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptWith()
        {
            return ExceptField("with");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithVs(PlayerPlayedWithProPlayerMatchTypeQueryBuilder playerPlayedWithProPlayerMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vs", alias, playerPlayedWithProPlayerMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptVs()
        {
            return ExceptField("vs");
        }
    }
}
