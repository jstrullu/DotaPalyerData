// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class NewsItemTypeQueryBuilder : GraphQlQueryBuilder<NewsItemTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "title" },
                new FieldMetadata { Name = "uri" },
                new FieldMetadata { Name = "author" },
                new FieldMetadata { Name = "contents" },
                new FieldMetadata { Name = "feedLabel" },
                new FieldMetadata { Name = "date", IsComplex = true },
                new FieldMetadata { Name = "feedName" }
            };

        protected override string TypeName { get { return "NewsItemType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NewsItemTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NewsItemTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public NewsItemTypeQueryBuilder WithUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uri", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptUri()
        {
            return ExceptField("uri");
        }

        public NewsItemTypeQueryBuilder WithAuthor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("author", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptAuthor()
        {
            return ExceptField("author");
        }

        public NewsItemTypeQueryBuilder WithContents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contents", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptContents()
        {
            return ExceptField("contents");
        }

        public NewsItemTypeQueryBuilder WithFeedLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedLabel", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptFeedLabel()
        {
            return ExceptField("feedLabel");
        }

        public NewsItemTypeQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public NewsItemTypeQueryBuilder WithFeedName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedName", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptFeedName()
        {
            return ExceptField("feedName");
        }
    }
}
