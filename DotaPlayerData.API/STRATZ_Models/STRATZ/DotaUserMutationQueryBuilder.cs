// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DotaUserMutationQueryBuilder : GraphQlQueryBuilder<DotaUserMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "readAllFeed" },
                new FieldMetadata { Name = "validateEmail" },
                new FieldMetadata { Name = "unsubscribeEmail" },
                new FieldMetadata { Name = "updateProfile" },
                new FieldMetadata { Name = "followPlayer" },
                new FieldMetadata { Name = "unfollowPlayer" },
                new FieldMetadata { Name = "updateFollowing" },
                new FieldMetadata { Name = "updateAllFollowing" },
                new FieldMetadata { Name = "updateFollowingFavorite" },
                new FieldMetadata { Name = "followLeague" },
                new FieldMetadata { Name = "unfollowLeague" },
                new FieldMetadata { Name = "applyStratzApiKey" },
                new FieldMetadata { Name = "checkPublicDotaAccount" }
            };

        protected override string TypeName { get { return "DotaUserMutation"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaUserMutationQueryBuilder WithReadAllFeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("readAllFeed", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaUserMutationQueryBuilder ExceptReadAllFeed()
        {
            return ExceptField("readAllFeed");
        }

        public DotaUserMutationQueryBuilder WithValidateEmail(QueryBuilderParameter<object> code, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "code", ArgumentValue = code} );
            return WithScalarField("validateEmail", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptValidateEmail()
        {
            return ExceptField("validateEmail");
        }

        public DotaUserMutationQueryBuilder WithUnsubscribeEmail(QueryBuilderParameter<object> code, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "code", ArgumentValue = code} );
            return WithScalarField("unsubscribeEmail", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnsubscribeEmail()
        {
            return ExceptField("unsubscribeEmail");
        }

        public DotaUserMutationQueryBuilder WithUpdateProfile(QueryBuilderParameter<CaptainJackIdentityProfileUpdateRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateProfile", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateProfile()
        {
            return ExceptField("updateProfile");
        }

        public DotaUserMutationQueryBuilder WithFollowPlayer(QueryBuilderParameter<object> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithScalarField("followPlayer", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptFollowPlayer()
        {
            return ExceptField("followPlayer");
        }

        public DotaUserMutationQueryBuilder WithUnfollowPlayer(QueryBuilderParameter<object> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithScalarField("unfollowPlayer", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnfollowPlayer()
        {
            return ExceptField("unfollowPlayer");
        }

        public DotaUserMutationQueryBuilder WithUpdateFollowing(QueryBuilderParameter<object> followedSteamAccountId, QueryBuilderParameter<UpdateFollowerRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "followedSteamAccountId", ArgumentValue = followedSteamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateFollowing", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateFollowing()
        {
            return ExceptField("updateFollowing");
        }

        public DotaUserMutationQueryBuilder WithUpdateAllFollowing(QueryBuilderParameter<UpdateFollowerRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateAllFollowing", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateAllFollowing()
        {
            return ExceptField("updateAllFollowing");
        }

        public DotaUserMutationQueryBuilder WithUpdateFollowingFavorite(QueryBuilderParameter<object> followedSteamAccountId, QueryBuilderParameter<bool> isFavorite, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "followedSteamAccountId", ArgumentValue = followedSteamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFavorite", ArgumentValue = isFavorite} );
            return WithScalarField("updateFollowingFavorite", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateFollowingFavorite()
        {
            return ExceptField("updateFollowingFavorite");
        }

        public DotaUserMutationQueryBuilder WithFollowLeague(QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithScalarField("followLeague", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptFollowLeague()
        {
            return ExceptField("followLeague");
        }

        public DotaUserMutationQueryBuilder WithUnfollowLeague(QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithScalarField("unfollowLeague", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnfollowLeague()
        {
            return ExceptField("unfollowLeague");
        }

        public DotaUserMutationQueryBuilder WithApplyStratzApiKey(QueryBuilderParameter<StratzApiType> tokenType, QueryBuilderParameter<string> emailAddress, QueryBuilderParameter<string> discordAddress, QueryBuilderParameter<string> websiteAddress, QueryBuilderParameter<string> description, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tokenType", ArgumentValue = tokenType} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "emailAddress", ArgumentValue = emailAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "discordAddress", ArgumentValue = discordAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "websiteAddress", ArgumentValue = websiteAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );
            return WithScalarField("applyStratzApiKey", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptApplyStratzApiKey()
        {
            return ExceptField("applyStratzApiKey");
        }

        public DotaUserMutationQueryBuilder WithCheckPublicDotaAccount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("checkPublicDotaAccount", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaUserMutationQueryBuilder ExceptCheckPublicDotaAccount()
        {
            return ExceptField("checkPublicDotaAccount");
        }
    }
}
