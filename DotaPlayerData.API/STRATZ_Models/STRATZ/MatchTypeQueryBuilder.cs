// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchTypeQueryBuilder : GraphQlQueryBuilder<MatchTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "didRadiantWin" },
                new FieldMetadata { Name = "durationSeconds" },
                new FieldMetadata { Name = "startDateTime", IsComplex = true },
                new FieldMetadata { Name = "endDateTime", IsComplex = true },
                new FieldMetadata { Name = "towerStatusRadiant" },
                new FieldMetadata { Name = "towerStatusDire" },
                new FieldMetadata { Name = "barracksStatusRadiant", IsComplex = true },
                new FieldMetadata { Name = "barracksStatusDire", IsComplex = true },
                new FieldMetadata { Name = "clusterId" },
                new FieldMetadata { Name = "firstBloodTime" },
                new FieldMetadata { Name = "lobbyType" },
                new FieldMetadata { Name = "numHumanPlayers" },
                new FieldMetadata { Name = "gameMode" },
                new FieldMetadata { Name = "replaySalt", IsComplex = true },
                new FieldMetadata { Name = "isStats" },
                new FieldMetadata { Name = "tournamentId" },
                new FieldMetadata { Name = "tournamentRound", IsComplex = true },
                new FieldMetadata { Name = "actualRank", IsComplex = true },
                new FieldMetadata { Name = "averageRank", IsComplex = true },
                new FieldMetadata { Name = "averageImp", IsComplex = true },
                new FieldMetadata { Name = "parsedDateTime", IsComplex = true },
                new FieldMetadata { Name = "statsDateTime", IsComplex = true },
                new FieldMetadata { Name = "leagueId" },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "radiantTeamId" },
                new FieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "direTeamId" },
                new FieldMetadata { Name = "direTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "seriesId", IsComplex = true },
                new FieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) },
                new FieldMetadata { Name = "gameVersionId", IsComplex = true },
                new FieldMetadata { Name = "regionId", IsComplex = true },
                new FieldMetadata { Name = "sequenceNum", IsComplex = true },
                new FieldMetadata { Name = "rank" },
                new FieldMetadata { Name = "bracket", IsComplex = true },
                new FieldMetadata { Name = "analysisOutcome" },
                new FieldMetadata { Name = "predictedOutcomeWeight", IsComplex = true },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(MatchPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "radiantNetworthLeads", IsComplex = true },
                new FieldMetadata { Name = "radiantExperienceLeads", IsComplex = true },
                new FieldMetadata { Name = "radiantKills", IsComplex = true },
                new FieldMetadata { Name = "direKills", IsComplex = true },
                new FieldMetadata { Name = "pickBans", IsComplex = true, QueryBuilderType = typeof(MatchStatsPickBanTypeQueryBuilder) },
                new FieldMetadata { Name = "towerStatus", IsComplex = true, QueryBuilderType = typeof(MatchStatsTowerReportTypeQueryBuilder) },
                new FieldMetadata { Name = "laneReport", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportTypeQueryBuilder) },
                new FieldMetadata { Name = "winRates", IsComplex = true },
                new FieldMetadata { Name = "predictedWinRates", IsComplex = true },
                new FieldMetadata { Name = "chatEvents", IsComplex = true, QueryBuilderType = typeof(MatchStatsChatEventTypeQueryBuilder) },
                new FieldMetadata { Name = "towerDeaths", IsComplex = true, QueryBuilderType = typeof(MatchStatsTowerDeathTypeQueryBuilder) },
                new FieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataTypeQueryBuilder) },
                new FieldMetadata { Name = "spectators", IsComplex = true, QueryBuilderType = typeof(MatchPlayerSpectatorTypeQueryBuilder) },
                new FieldMetadata { Name = "bottomLaneOutcome" },
                new FieldMetadata { Name = "midLaneOutcome" },
                new FieldMetadata { Name = "topLaneOutcome" },
                new FieldMetadata { Name = "didRequestDownload" }
            };

        protected override string TypeName { get { return "MatchType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public MatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public MatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public MatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public MatchTypeQueryBuilder WithTowerStatusRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerStatusRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatusRadiant()
        {
            return ExceptField("towerStatusRadiant");
        }

        public MatchTypeQueryBuilder WithTowerStatusDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerStatusDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatusDire()
        {
            return ExceptField("towerStatusDire");
        }

        public MatchTypeQueryBuilder WithBarracksStatusRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("barracksStatusRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBarracksStatusRadiant()
        {
            return ExceptField("barracksStatusRadiant");
        }

        public MatchTypeQueryBuilder WithBarracksStatusDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("barracksStatusDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBarracksStatusDire()
        {
            return ExceptField("barracksStatusDire");
        }

        public MatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public MatchTypeQueryBuilder WithFirstBloodTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstBloodTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptFirstBloodTime()
        {
            return ExceptField("firstBloodTime");
        }

        public MatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public MatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public MatchTypeQueryBuilder WithIsStats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStats", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptIsStats()
        {
            return ExceptField("isStats");
        }

        public MatchTypeQueryBuilder WithTournamentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tournamentId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTournamentId()
        {
            return ExceptField("tournamentId");
        }

        public MatchTypeQueryBuilder WithTournamentRound(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tournamentRound", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTournamentRound()
        {
            return ExceptField("tournamentRound");
        }

        public MatchTypeQueryBuilder WithActualRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("actualRank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptActualRank()
        {
            return ExceptField("actualRank");
        }

        public MatchTypeQueryBuilder WithAverageRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageRank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAverageRank()
        {
            return ExceptField("averageRank");
        }

        public MatchTypeQueryBuilder WithAverageImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAverageImp()
        {
            return ExceptField("averageImp");
        }

        public MatchTypeQueryBuilder WithParsedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parsedDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptParsedDateTime()
        {
            return ExceptField("parsedDateTime");
        }

        public MatchTypeQueryBuilder WithStatsDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statsDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptStatsDateTime()
        {
            return ExceptField("statsDateTime");
        }

        public MatchTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public MatchTypeQueryBuilder WithRadiantTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantTeamId()
        {
            return ExceptField("radiantTeamId");
        }

        public MatchTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public MatchTypeQueryBuilder WithDireTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireTeamId()
        {
            return ExceptField("direTeamId");
        }

        public MatchTypeQueryBuilder WithDireTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireTeam()
        {
            return ExceptField("direTeam");
        }

        public MatchTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public MatchTypeQueryBuilder WithSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("series", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public MatchTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public MatchTypeQueryBuilder WithSequenceNum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sequenceNum", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSequenceNum()
        {
            return ExceptField("sequenceNum");
        }

        public MatchTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public MatchTypeQueryBuilder WithBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracket", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBracket()
        {
            return ExceptField("bracket");
        }

        public MatchTypeQueryBuilder WithAnalysisOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("analysisOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAnalysisOutcome()
        {
            return ExceptField("analysisOutcome");
        }

        public MatchTypeQueryBuilder WithPredictedOutcomeWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("predictedOutcomeWeight", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPredictedOutcomeWeight()
        {
            return ExceptField("predictedOutcomeWeight");
        }

        public MatchTypeQueryBuilder WithPlayers(MatchPlayerTypeQueryBuilder matchPlayerTypeQueryBuilder, QueryBuilderParameter<object> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, matchPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public MatchTypeQueryBuilder WithRadiantNetworthLeads(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantNetworthLeads", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantNetworthLeads()
        {
            return ExceptField("radiantNetworthLeads");
        }

        public MatchTypeQueryBuilder WithRadiantExperienceLeads(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantExperienceLeads", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantExperienceLeads()
        {
            return ExceptField("radiantExperienceLeads");
        }

        public MatchTypeQueryBuilder WithRadiantKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantKills()
        {
            return ExceptField("radiantKills");
        }

        public MatchTypeQueryBuilder WithDireKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireKills()
        {
            return ExceptField("direKills");
        }

        public MatchTypeQueryBuilder WithPickBans(MatchStatsPickBanTypeQueryBuilder matchStatsPickBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pickBans", alias, matchStatsPickBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPickBans()
        {
            return ExceptField("pickBans");
        }

        public MatchTypeQueryBuilder WithTowerStatus(MatchStatsTowerReportTypeQueryBuilder matchStatsTowerReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerStatus", alias, matchStatsTowerReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatus()
        {
            return ExceptField("towerStatus");
        }

        public MatchTypeQueryBuilder WithLaneReport(MatchStatsLaneReportTypeQueryBuilder matchStatsLaneReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("laneReport", alias, matchStatsLaneReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLaneReport()
        {
            return ExceptField("laneReport");
        }

        public MatchTypeQueryBuilder WithWinRates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRates", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptWinRates()
        {
            return ExceptField("winRates");
        }

        public MatchTypeQueryBuilder WithPredictedWinRates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("predictedWinRates", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPredictedWinRates()
        {
            return ExceptField("predictedWinRates");
        }

        public MatchTypeQueryBuilder WithChatEvents(MatchStatsChatEventTypeQueryBuilder matchStatsChatEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chatEvents", alias, matchStatsChatEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptChatEvents()
        {
            return ExceptField("chatEvents");
        }

        public MatchTypeQueryBuilder WithTowerDeaths(MatchStatsTowerDeathTypeQueryBuilder matchStatsTowerDeathTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerDeaths", alias, matchStatsTowerDeathTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerDeaths()
        {
            return ExceptField("towerDeaths");
        }

        public MatchTypeQueryBuilder WithPlaybackData(MatchPlaybackDataTypeQueryBuilder matchPlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchPlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchTypeQueryBuilder WithSpectators(MatchPlayerSpectatorTypeQueryBuilder matchPlayerSpectatorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("spectators", alias, matchPlayerSpectatorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSpectators()
        {
            return ExceptField("spectators");
        }

        public MatchTypeQueryBuilder WithBottomLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bottomLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBottomLaneOutcome()
        {
            return ExceptField("bottomLaneOutcome");
        }

        public MatchTypeQueryBuilder WithMidLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("midLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptMidLaneOutcome()
        {
            return ExceptField("midLaneOutcome");
        }

        public MatchTypeQueryBuilder WithTopLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTopLaneOutcome()
        {
            return ExceptField("topLaneOutcome");
        }

        public MatchTypeQueryBuilder WithDidRequestDownload(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRequestDownload", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDidRequestDownload()
        {
            return ExceptField("didRequestDownload");
        }
    }
}
