// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PageBattlepassQueryQueryBuilder : GraphQlQueryBuilder<PageBattlepassQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "predictionsHero", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionHeroTypeQueryBuilder) },
                new FieldMetadata { Name = "predictionsTeams", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionTeamTypeQueryBuilder) },
                new FieldMetadata { Name = "predictionsPlayers", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "predictionsTournament", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionTournamentTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageBattlepassQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageBattlepassQueryQueryBuilder WithPredictionsHero(BattlepassPredictionHeroTypeQueryBuilder battlepassPredictionHeroTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsHero", alias, battlepassPredictionHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsHero()
        {
            return ExceptField("predictionsHero");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsTeams(BattlepassPredictionTeamTypeQueryBuilder battlepassPredictionTeamTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, QueryBuilderParameter<bool?> averaged = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            if (averaged != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averaged", ArgumentValue = averaged} );

            return WithObjectField("predictionsTeams", alias, battlepassPredictionTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsTeams()
        {
            return ExceptField("predictionsTeams");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsPlayers(BattlepassPredictionPlayerTypeQueryBuilder battlepassPredictionPlayerTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsPlayers", alias, battlepassPredictionPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsPlayers()
        {
            return ExceptField("predictionsPlayers");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsTournament(BattlepassPredictionTournamentTypeQueryBuilder battlepassPredictionTournamentTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsTournament", alias, battlepassPredictionTournamentTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsTournament()
        {
            return ExceptField("predictionsTournament");
        }
    }
}
