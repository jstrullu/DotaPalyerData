// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueTableTeamOverviewTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamOverviewTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "points" },
                new FieldMetadata { Name = "earnings" },
                new FieldMetadata { Name = "seriesCount" },
                new FieldMetadata { Name = "seriesWins" },
                new FieldMetadata { Name = "seriesDraws" },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "matchWins" },
                new FieldMetadata { Name = "tmp" }
            };

        protected override string TypeName { get { return "LeagueTableTeamOverviewType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamOverviewTypeQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithEarnings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("earnings", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptEarnings()
        {
            return ExceptField("earnings");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesCount()
        {
            return ExceptField("seriesCount");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesWins()
        {
            return ExceptField("seriesWins");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesDraws(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesDraws", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesDraws()
        {
            return ExceptField("seriesDraws");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithTmp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tmp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptTmp()
        {
            return ExceptField("tmp");
        }
    }
}
