// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchLiveInsightTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveInsightTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "teamOneVsWinCount" },
                new FieldMetadata { Name = "teamTwoVsWinCount" },
                new FieldMetadata { Name = "teamOneLeagueWinCount" },
                new FieldMetadata { Name = "teamOneLeagueMatchCount" },
                new FieldMetadata { Name = "teamTwoLeagueWinCount" },
                new FieldMetadata { Name = "teamTwoLeagueMatchCount" },
                new FieldMetadata { Name = "lastSeries", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchLiveInsightType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveInsightTypeQueryBuilder WithTeamOneVsWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneVsWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneVsWinCount()
        {
            return ExceptField("teamOneVsWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoVsWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoVsWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoVsWinCount()
        {
            return ExceptField("teamTwoVsWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamOneLeagueWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneLeagueWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneLeagueWinCount()
        {
            return ExceptField("teamOneLeagueWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamOneLeagueMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneLeagueMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneLeagueMatchCount()
        {
            return ExceptField("teamOneLeagueMatchCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoLeagueWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoLeagueWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoLeagueWinCount()
        {
            return ExceptField("teamTwoLeagueWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoLeagueMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoLeagueMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoLeagueMatchCount()
        {
            return ExceptField("teamTwoLeagueMatchCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithLastSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lastSeries", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptLastSeries()
        {
            return ExceptField("lastSeries");
        }
    }
}
