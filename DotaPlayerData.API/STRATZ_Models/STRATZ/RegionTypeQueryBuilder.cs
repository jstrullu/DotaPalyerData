// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class RegionTypeQueryBuilder : GraphQlQueryBuilder<RegionTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "clientName" },
                new FieldMetadata { Name = "displayName" },
                new FieldMetadata { Name = "leaderboardDivision" },
                new FieldMetadata { Name = "langKey" },
                new FieldMetadata { Name = "latitude", IsComplex = true },
                new FieldMetadata { Name = "longitude", IsComplex = true },
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "matchGroup", IsComplex = true },
                new FieldMetadata { Name = "weekendTourneyDivision" }
            };

        protected override string TypeName { get { return "RegionType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RegionTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RegionTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RegionTypeQueryBuilder WithClientName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientName", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptClientName()
        {
            return ExceptField("clientName");
        }

        public RegionTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public RegionTypeQueryBuilder WithLeaderboardDivision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaderboardDivision", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLeaderboardDivision()
        {
            return ExceptField("leaderboardDivision");
        }

        public RegionTypeQueryBuilder WithLangKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("langKey", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLangKey()
        {
            return ExceptField("langKey");
        }

        public RegionTypeQueryBuilder WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLatitude()
        {
            return ExceptField("latitude");
        }

        public RegionTypeQueryBuilder WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLongitude()
        {
            return ExceptField("longitude");
        }

        public RegionTypeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public RegionTypeQueryBuilder WithMatchGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptMatchGroup()
        {
            return ExceptField("matchGroup");
        }

        public RegionTypeQueryBuilder WithWeekendTourneyDivision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weekendTourneyDivision", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptWeekendTourneyDivision()
        {
            return ExceptField("weekendTourneyDivision");
        }
    }
}
