// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DotaQueryQueryBuilder : GraphQlQueryBuilder<DotaQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "player", IsComplex = true, QueryBuilderType = typeof(PlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new FieldMetadata { Name = "yogurt", IsComplex = true, QueryBuilderType = typeof(YogurtQueryQueryBuilder) },
                new FieldMetadata { Name = "plus", IsComplex = true, QueryBuilderType = typeof(PlusQueryQueryBuilder) },
                new FieldMetadata { Name = "stratz", IsComplex = true, QueryBuilderType = typeof(StratzQueryQueryBuilder) },
                new FieldMetadata { Name = "heroStats", IsComplex = true, QueryBuilderType = typeof(HeroStatsQueryQueryBuilder) },
                new FieldMetadata { Name = "constants", IsComplex = true, QueryBuilderType = typeof(ConstantQueryQueryBuilder) },
                new FieldMetadata { Name = "leaderboard", IsComplex = true, QueryBuilderType = typeof(LeaderboardQueryQueryBuilder) },
                new FieldMetadata { Name = "live", IsComplex = true, QueryBuilderType = typeof(LiveQueryQueryBuilder) },
                new FieldMetadata { Name = "vendor", IsComplex = true, QueryBuilderType = typeof(VendorQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaQueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public DotaQueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaQueryQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public DotaQueryQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<IEnumerable<object>> ids, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public DotaQueryQueryBuilder WithPlayer(PlayerTypeQueryBuilder playerTypeQueryBuilder, QueryBuilderParameter<object> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithObjectField("player", alias, playerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptPlayer()
        {
            return ExceptField("player");
        }

        public DotaQueryQueryBuilder WithPlayers(PlayerTypeQueryBuilder playerTypeQueryBuilder, QueryBuilderParameter<IEnumerable<object>> steamAccountIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            return WithObjectField("players", alias, playerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public DotaQueryQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, QueryBuilderParameter<int> teamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamId", ArgumentValue = teamId} );
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public DotaQueryQueryBuilder WithTeams(TeamTypeQueryBuilder teamTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            return WithObjectField("teams", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public DotaQueryQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public DotaQueryQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<LeagueRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public DotaQueryQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public DotaQueryQueryBuilder WithYogurt(YogurtQueryQueryBuilder yogurtQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("yogurt", alias, yogurtQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptYogurt()
        {
            return ExceptField("yogurt");
        }

        public DotaQueryQueryBuilder WithPlus(PlusQueryQueryBuilder plusQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("plus", alias, plusQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptPlus()
        {
            return ExceptField("plus");
        }

        public DotaQueryQueryBuilder WithStratz(StratzQueryQueryBuilder stratzQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stratz", alias, stratzQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptStratz()
        {
            return ExceptField("stratz");
        }

        public DotaQueryQueryBuilder WithHeroStats(HeroStatsQueryQueryBuilder heroStatsQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroStats", alias, heroStatsQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptHeroStats()
        {
            return ExceptField("heroStats");
        }

        public DotaQueryQueryBuilder WithConstants(ConstantQueryQueryBuilder constantQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("constants", alias, constantQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptConstants()
        {
            return ExceptField("constants");
        }

        public DotaQueryQueryBuilder WithLeaderboard(LeaderboardQueryQueryBuilder leaderboardQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leaderboard", alias, leaderboardQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptLeaderboard()
        {
            return ExceptField("leaderboard");
        }

        public DotaQueryQueryBuilder WithLive(LiveQueryQueryBuilder liveQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("live", alias, liveQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptLive()
        {
            return ExceptField("live");
        }

        public DotaQueryQueryBuilder WithVendor(VendorQueryQueryBuilder vendorQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vendor", alias, vendorQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptVendor()
        {
            return ExceptField("vendor");
        }
    }
}
