// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class Ti2020CustomGamePlayerDepthListTypeQueryBuilder : GraphQlQueryBuilder<Ti2020CustomGamePlayerDepthListTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "numDeaths", IsComplex = true },
                new FieldMetadata { Name = "goldBags", IsComplex = true },
                new FieldMetadata { Name = "kills", IsComplex = true },
                new FieldMetadata { Name = "level", IsComplex = true },
                new FieldMetadata { Name = "networth" },
                new FieldMetadata { Name = "rarity", IsComplex = true },
                new FieldMetadata { Name = "selectedRewardAbilityId", IsComplex = true },
                new FieldMetadata { Name = "selectedRewardAbility", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new FieldMetadata { Name = "unSelectedRewardAbilityId1", IsComplex = true },
                new FieldMetadata { Name = "unSelectedRewardAbility1", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new FieldMetadata { Name = "unSelectedRewardAbilityId2", IsComplex = true },
                new FieldMetadata { Name = "unSelectedRewardAbility2", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new FieldMetadata { Name = "selectedRewardImageAbilityId", IsComplex = true }
            };

        protected override string TypeName { get { return "TI2020CustomGamePlayerDepthListType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithNumDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptNumDeaths()
        {
            return ExceptField("numDeaths");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithGoldBags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldBags", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptGoldBags()
        {
            return ExceptField("goldBags");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithRarity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rarity", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptRarity()
        {
            return ExceptField("rarity");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithSelectedRewardAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedRewardAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptSelectedRewardAbilityId()
        {
            return ExceptField("selectedRewardAbilityId");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithSelectedRewardAbility(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("selectedRewardAbility", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptSelectedRewardAbility()
        {
            return ExceptField("selectedRewardAbility");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbilityId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unSelectedRewardAbilityId1", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbilityId1()
        {
            return ExceptField("unSelectedRewardAbilityId1");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbility1(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("unSelectedRewardAbility1", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbility1()
        {
            return ExceptField("unSelectedRewardAbility1");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbilityId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unSelectedRewardAbilityId2", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbilityId2()
        {
            return ExceptField("unSelectedRewardAbilityId2");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbility2(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("unSelectedRewardAbility2", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbility2()
        {
            return ExceptField("unSelectedRewardAbility2");
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder WithSelectedRewardImageAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedRewardImageAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGamePlayerDepthListTypeQueryBuilder ExceptSelectedRewardImageAbilityId()
        {
            return ExceptField("selectedRewardImageAbilityId");
        }
    }
}
