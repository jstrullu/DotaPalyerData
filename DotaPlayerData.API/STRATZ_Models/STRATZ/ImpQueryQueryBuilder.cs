// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class ImpQueryQueryBuilder : GraphQlQueryBuilder<ImpQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchGenerator", IsComplex = true, QueryBuilderType = typeof(ImpGeneratorMatchPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "playerGenerator", IsComplex = true, QueryBuilderType = typeof(ImpGeneratorPlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ImpQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImpQueryQueryBuilder WithMatchGenerator(ImpGeneratorMatchPlayerTypeQueryBuilder impGeneratorMatchPlayerTypeQueryBuilder, QueryBuilderParameter<object> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithObjectField("matchGenerator", alias, impGeneratorMatchPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ImpQueryQueryBuilder ExceptMatchGenerator()
        {
            return ExceptField("matchGenerator");
        }

        public ImpQueryQueryBuilder WithPlayerGenerator(ImpGeneratorPlayerTypeQueryBuilder impGeneratorPlayerTypeQueryBuilder, QueryBuilderParameter<ImpGeneratorRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("playerGenerator", alias, impGeneratorPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ImpQueryQueryBuilder ExceptPlayerGenerator()
        {
            return ExceptField("playerGenerator");
        }
    }
}
