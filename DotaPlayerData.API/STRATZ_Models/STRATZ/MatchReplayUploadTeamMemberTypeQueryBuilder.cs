// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchReplayUploadTeamMemberTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadTeamMemberTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "captainJackIdentityId", IsComplex = true },
                new FieldMetadata { Name = "matchUploadTeamId", IsComplex = true },
                new FieldMetadata { Name = "isAdmin" },
                new FieldMetadata { Name = "isDefaultTeam" },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadTeamMemberType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithIsAdmin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdmin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptIsAdmin()
        {
            return ExceptField("isAdmin");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithIsDefaultTeam(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDefaultTeam", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptIsDefaultTeam()
        {
            return ExceptField("isDefaultTeam");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }
}
