// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerLeaderBoardByHeroTypeQueryBuilder : GraphQlQueryBuilder<PlayerLeaderBoardByHeroTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "seasonBracket", IsComplex = true },
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "impAverage", IsComplex = true },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "wins", IsComplex = true },
                new FieldMetadata { Name = "losses", IsComplex = true },
                new FieldMetadata { Name = "winStreak", IsComplex = true },
                new FieldMetadata { Name = "regionId", IsComplex = true },
                new FieldMetadata { Name = "changeInRanking", IsComplex = true },
                new FieldMetadata { Name = "createdDateTime", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerLeaderBoardByHeroType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSeasonBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonBracket", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSeasonBracket()
        {
            return ExceptField("seasonBracket");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithImpAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptImpAverage()
        {
            return ExceptField("impAverage");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wins", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptWins()
        {
            return ExceptField("wins");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithLosses(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("losses", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptLosses()
        {
            return ExceptField("losses");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithWinStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winStreak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptWinStreak()
        {
            return ExceptField("winStreak");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithChangeInRanking(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("changeInRanking", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptChangeInRanking()
        {
            return ExceptField("changeInRanking");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }
    }
}
