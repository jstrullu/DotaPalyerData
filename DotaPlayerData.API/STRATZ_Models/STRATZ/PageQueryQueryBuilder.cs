// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PageQueryQueryBuilder : GraphQlQueryBuilder<PageQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "player", IsComplex = true, QueryBuilderType = typeof(PagePlayerQueryQueryBuilder) },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PagePlayersQueryQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(PageMatchesQueryQueryBuilder) },
                new FieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(PageLeaguesQueryQueryBuilder) },
                new FieldMetadata { Name = "aghanim", IsComplex = true, QueryBuilderType = typeof(PageAghanimQueryQueryBuilder) },
                new FieldMetadata { Name = "imp", IsComplex = true, QueryBuilderType = typeof(ImpQueryQueryBuilder) },
                new FieldMetadata { Name = "direTide", IsComplex = true, QueryBuilderType = typeof(PageDireTideQueryQueryBuilder) },
                new FieldMetadata { Name = "battlePass", IsComplex = true, QueryBuilderType = typeof(PageBattlepassQueryQueryBuilder) },
                new FieldMetadata { Name = "rosh", IsComplex = true, QueryBuilderType = typeof(RoshQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "PageQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageQueryQueryBuilder WithPlayer(PagePlayerQueryQueryBuilder pagePlayerQueryQueryBuilder, QueryBuilderParameter<object> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithObjectField("player", alias, pagePlayerQueryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryQueryBuilder ExceptPlayer()
        {
            return ExceptField("player");
        }

        public PageQueryQueryBuilder WithPlayers(PagePlayersQueryQueryBuilder pagePlayersQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, pagePlayersQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PageQueryQueryBuilder WithMatches(PageMatchesQueryQueryBuilder pageMatchesQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, pageMatchesQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PageQueryQueryBuilder WithLeagues(PageLeaguesQueryQueryBuilder pageLeaguesQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, pageLeaguesQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public PageQueryQueryBuilder WithAghanim(PageAghanimQueryQueryBuilder pageAghanimQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("aghanim", alias, pageAghanimQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptAghanim()
        {
            return ExceptField("aghanim");
        }

        public PageQueryQueryBuilder WithImp(ImpQueryQueryBuilder impQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("imp", alias, impQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PageQueryQueryBuilder WithDireTide(PageDireTideQueryQueryBuilder pageDireTideQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTide", alias, pageDireTideQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptDireTide()
        {
            return ExceptField("direTide");
        }

        public PageQueryQueryBuilder WithBattlePass(PageBattlepassQueryQueryBuilder pageBattlepassQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("battlePass", alias, pageBattlepassQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptBattlePass()
        {
            return ExceptField("battlePass");
        }

        public PageQueryQueryBuilder WithRosh(RoshQueryQueryBuilder roshQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rosh", alias, roshQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptRosh()
        {
            return ExceptField("rosh");
        }
    }
}
