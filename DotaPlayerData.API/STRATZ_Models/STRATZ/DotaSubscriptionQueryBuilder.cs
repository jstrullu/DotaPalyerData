// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DotaSubscriptionQueryBuilder : GraphQlQueryBuilder<DotaSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchCount", IsComplex = true, QueryBuilderType = typeof(TotalMatchCountTypeQueryBuilder) },
                new FieldMetadata { Name = "playerCount", IsComplex = true, QueryBuilderType = typeof(TotalPlayerCountTypeQueryBuilder) },
                new FieldMetadata { Name = "feedLive", IsComplex = true, QueryBuilderType = typeof(LiveEventTypeQueryBuilder) },
                new FieldMetadata { Name = "matchLive", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) },
                new FieldMetadata { Name = "matchLiveLeague", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaSubscription"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaSubscriptionQueryBuilder(string operationName = null) : base("subscription", operationName)
        {
        }

        public DotaSubscriptionQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaSubscriptionQueryBuilder WithMatchCount(TotalMatchCountTypeQueryBuilder totalMatchCountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchCount", alias, totalMatchCountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public DotaSubscriptionQueryBuilder WithPlayerCount(TotalPlayerCountTypeQueryBuilder totalPlayerCountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerCount", alias, totalPlayerCountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public DotaSubscriptionQueryBuilder WithFeedLive(LiveEventTypeQueryBuilder liveEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feedLive", alias, liveEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptFeedLive()
        {
            return ExceptField("feedLive");
        }

        public DotaSubscriptionQueryBuilder WithMatchLive(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<object> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithObjectField("matchLive", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaSubscriptionQueryBuilder ExceptMatchLive()
        {
            return ExceptField("matchLive");
        }

        public DotaSubscriptionQueryBuilder WithMatchLiveLeague(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithObjectField("matchLiveLeague", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaSubscriptionQueryBuilder ExceptMatchLiveLeague()
        {
            return ExceptField("matchLiveLeague");
        }
    }
}
