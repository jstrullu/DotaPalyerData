// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroDryadTypeQueryBuilder : GraphQlQueryBuilder<HeroDryadTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "with", IsComplex = true, QueryBuilderType = typeof(HeroStatsHeroDryadTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCountWith", IsComplex = true },
                new FieldMetadata { Name = "vs", IsComplex = true, QueryBuilderType = typeof(HeroStatsHeroDryadTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCountVs", IsComplex = true }
            };

        protected override string TypeName { get { return "HeroDryadType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroDryadTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroDryadTypeQueryBuilder WithWith(HeroStatsHeroDryadTypeQueryBuilder heroStatsHeroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("with", alias, heroStatsHeroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptWith()
        {
            return ExceptField("with");
        }

        public HeroDryadTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public HeroDryadTypeQueryBuilder WithVs(HeroStatsHeroDryadTypeQueryBuilder heroStatsHeroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vs", alias, heroStatsHeroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptVs()
        {
            return ExceptField("vs");
        }

        public HeroDryadTypeQueryBuilder WithMatchCountVs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountVs", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptMatchCountVs()
        {
            return ExceptField("matchCountVs");
        }
    }
}
