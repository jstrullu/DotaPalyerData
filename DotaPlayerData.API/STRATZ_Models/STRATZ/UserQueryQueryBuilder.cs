// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class UserQueryQueryBuilder : GraphQlQueryBuilder<UserQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "profile", IsComplex = true, QueryBuilderType = typeof(UserTypeQueryBuilder) },
                new FieldMetadata { Name = "homepage", IsComplex = true, QueryBuilderType = typeof(UserHomepageTypeQueryBuilder) },
                new FieldMetadata { Name = "followers", IsComplex = true, QueryBuilderType = typeof(FollowerTypeQueryBuilder) },
                new FieldMetadata { Name = "following", IsComplex = true, QueryBuilderType = typeof(FollowerTypeQueryBuilder) },
                new FieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedResponseTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UserQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserQueryQueryBuilder WithProfile(UserTypeQueryBuilder userTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("profile", alias, userTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptProfile()
        {
            return ExceptField("profile");
        }

        public UserQueryQueryBuilder WithHomepage(UserHomepageTypeQueryBuilder userHomepageTypeQueryBuilder, QueryBuilderParameter<int> take, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );
            return WithObjectField("homepage", alias, userHomepageTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryQueryBuilder ExceptHomepage()
        {
            return ExceptField("homepage");
        }

        public UserQueryQueryBuilder WithFollowers(FollowerTypeQueryBuilder followerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("followers", alias, followerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptFollowers()
        {
            return ExceptField("followers");
        }

        public UserQueryQueryBuilder WithFollowing(FollowerTypeQueryBuilder followerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("following", alias, followerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptFollowing()
        {
            return ExceptField("following");
        }

        public UserQueryQueryBuilder WithFeed(FeedResponseTypeQueryBuilder feedResponseTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("feed", alias, feedResponseTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserQueryQueryBuilder ExceptFeed()
        {
            return ExceptField("feed");
        }
    }
}
