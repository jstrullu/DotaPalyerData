// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueTableTeamTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "teamId" },
                new FieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(LeagueRegisteredPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "overview", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamOverviewTypeQueryBuilder) },
                new FieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamStatsTypeQueryBuilder) },
                new FieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamHeroesObjectTypeQueryBuilder) },
                new FieldMetadata { Name = "lanes", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamLanesObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueTableTeamType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public LeagueTableTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public LeagueTableTeamTypeQueryBuilder WithMembers(LeagueRegisteredPlayerTypeQueryBuilder leagueRegisteredPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("members", alias, leagueRegisteredPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public LeagueTableTeamTypeQueryBuilder WithOverview(LeagueTableTeamOverviewTypeQueryBuilder leagueTableTeamOverviewTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("overview", alias, leagueTableTeamOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public LeagueTableTeamTypeQueryBuilder WithStats(LeagueTableTeamStatsTypeQueryBuilder leagueTableTeamStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, leagueTableTeamStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public LeagueTableTeamTypeQueryBuilder WithHeroes(LeagueTableTeamHeroesObjectTypeQueryBuilder leagueTableTeamHeroesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, leagueTableTeamHeroesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public LeagueTableTeamTypeQueryBuilder WithLanes(LeagueTableTeamLanesObjectTypeQueryBuilder leagueTableTeamLanesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanes", alias, leagueTableTeamLanesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptLanes()
        {
            return ExceptField("lanes");
        }
    }
}
