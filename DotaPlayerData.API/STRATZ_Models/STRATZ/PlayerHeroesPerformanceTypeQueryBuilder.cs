// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerHeroesPerformanceTypeQueryBuilder : GraphQlQueryBuilder<PlayerHeroesPerformanceTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "kDA" },
                new FieldMetadata { Name = "avgKills" },
                new FieldMetadata { Name = "avgDeaths" },
                new FieldMetadata { Name = "avgAssists" },
                new FieldMetadata { Name = "duration" },
                new FieldMetadata { Name = "imp" },
                new FieldMetadata { Name = "best" },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "goldPerMinute" },
                new FieldMetadata { Name = "experiencePerMinute" },
                new FieldMetadata { Name = "positionScore", IsComplex = true, QueryBuilderType = typeof(PlayerHeroesPerformanceScoreTypeQueryBuilder) },
                new FieldMetadata { Name = "lastPlayedDateTime", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerHeroesPerformanceType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerHeroesPerformanceTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kDA", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptKda()
        {
            return ExceptField("kDA");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithBest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("best", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptBest()
        {
            return ExceptField("best");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithPositionScore(PlayerHeroesPerformanceScoreTypeQueryBuilder playerHeroesPerformanceScoreTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("positionScore", alias, playerHeroesPerformanceScoreTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptPositionScore()
        {
            return ExceptField("positionScore");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithLastPlayedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastPlayedDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptLastPlayedDateTime()
        {
            return ExceptField("lastPlayedDateTime");
        }
    }
}
