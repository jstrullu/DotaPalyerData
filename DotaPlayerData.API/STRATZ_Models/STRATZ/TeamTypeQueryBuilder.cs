// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class TeamTypeQueryBuilder : GraphQlQueryBuilder<TeamTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "tag" },
                new FieldMetadata { Name = "dateCreated", IsComplex = true },
                new FieldMetadata { Name = "isPro" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "countryCode" },
                new FieldMetadata { Name = "url" },
                new FieldMetadata { Name = "logo" },
                new FieldMetadata { Name = "baseLogo" },
                new FieldMetadata { Name = "bannerLogo" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "lossCount" },
                new FieldMetadata { Name = "lastMatchDateTime", IsComplex = true },
                new FieldMetadata { Name = "countryName" },
                new FieldMetadata { Name = "coachSteamAccountId", IsComplex = true },
                new FieldMetadata { Name = "coachSteamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) },
                new FieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(SteamAccountTeamMemberTypeQueryBuilder) },
                new FieldMetadata { Name = "matchesGroupBy", IsComplex = true, QueryBuilderType = typeof(MatchGroupByTypeQueryBuilder) },
                new FieldMetadata { Name = "heroPickBan", IsComplex = true, QueryBuilderType = typeof(MatchPickBanGroupByTypeQueryBuilder) },
                new FieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TeamType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TeamTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TeamTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TeamTypeQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public TeamTypeQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public TeamTypeQueryBuilder WithIsPro(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPro", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptIsPro()
        {
            return ExceptField("isPro");
        }

        public TeamTypeQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public TeamTypeQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public TeamTypeQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public TeamTypeQueryBuilder WithLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLogo()
        {
            return ExceptField("logo");
        }

        public TeamTypeQueryBuilder WithBaseLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseLogo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptBaseLogo()
        {
            return ExceptField("baseLogo");
        }

        public TeamTypeQueryBuilder WithBannerLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannerLogo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptBannerLogo()
        {
            return ExceptField("bannerLogo");
        }

        public TeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public TeamTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }

        public TeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public TeamTypeQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public TeamTypeQueryBuilder WithCoachSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coachSteamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCoachSteamAccountId()
        {
            return ExceptField("coachSteamAccountId");
        }

        public TeamTypeQueryBuilder WithCoachSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coachSteamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCoachSteamAccount()
        {
            return ExceptField("coachSteamAccount");
        }

        public TeamTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<TeamMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public TeamTypeQueryBuilder WithSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, QueryBuilderParameter<FilterSeriesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("series", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public TeamTypeQueryBuilder WithMembers(SteamAccountTeamMemberTypeQueryBuilder steamAccountTeamMemberTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("members", alias, steamAccountTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public TeamTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public TeamTypeQueryBuilder WithMatchesGroupBy(MatchGroupByTypeQueryBuilder matchGroupByTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesGroupByRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matchesGroupBy", alias, matchGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptMatchesGroupBy()
        {
            return ExceptField("matchesGroupBy");
        }

        public TeamTypeQueryBuilder WithHeroPickBan(MatchPickBanGroupByTypeQueryBuilder matchPickBanGroupByTypeQueryBuilder, QueryBuilderParameter<HeroPickBanRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroPickBan", alias, matchPickBanGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptHeroPickBan()
        {
            return ExceptField("heroPickBan");
        }

        public TeamTypeQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }
    }
}
