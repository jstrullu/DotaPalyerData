// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class ModifierTypeQueryBuilder : GraphQlQueryBuilder<ModifierTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "buffDuration" },
                new FieldMetadata { Name = "isRoot" },
                new FieldMetadata { Name = "isStun" },
                new FieldMetadata { Name = "isSilence" },
                new FieldMetadata { Name = "isInvisible" },
                new FieldMetadata { Name = "isShackle" },
                new FieldMetadata { Name = "isHex" },
                new FieldMetadata { Name = "isSleep" },
                new FieldMetadata { Name = "isCyclone" },
                new FieldMetadata { Name = "isTaunt" },
                new FieldMetadata { Name = "isDisarm" },
                new FieldMetadata { Name = "isBlind" },
                new FieldMetadata { Name = "isEthereal" },
                new FieldMetadata { Name = "isMovementSlow" },
                new FieldMetadata { Name = "isAttackSlow" },
                new FieldMetadata { Name = "isBreak" },
                new FieldMetadata { Name = "isArmorReduce" },
                new FieldMetadata { Name = "isAttackReduce" },
                new FieldMetadata { Name = "isMute" },
                new FieldMetadata { Name = "isDamageAmplified" },
                new FieldMetadata { Name = "isMovementDebuff" },
                new FieldMetadata { Name = "isKnockback" },
                new FieldMetadata { Name = "isWeaken" },
                new FieldMetadata { Name = "isItem" },
                new FieldMetadata { Name = "isBanished" }
            };

        protected override string TypeName { get { return "ModifierType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ModifierTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ModifierTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ModifierTypeQueryBuilder WithBuffDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buffDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptBuffDuration()
        {
            return ExceptField("buffDuration");
        }

        public ModifierTypeQueryBuilder WithIsRoot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRoot", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsRoot()
        {
            return ExceptField("isRoot");
        }

        public ModifierTypeQueryBuilder WithIsStun(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStun", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsStun()
        {
            return ExceptField("isStun");
        }

        public ModifierTypeQueryBuilder WithIsSilence(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSilence", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsSilence()
        {
            return ExceptField("isSilence");
        }

        public ModifierTypeQueryBuilder WithIsInvisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInvisible", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsInvisible()
        {
            return ExceptField("isInvisible");
        }

        public ModifierTypeQueryBuilder WithIsShackle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isShackle", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsShackle()
        {
            return ExceptField("isShackle");
        }

        public ModifierTypeQueryBuilder WithIsHex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isHex", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsHex()
        {
            return ExceptField("isHex");
        }

        public ModifierTypeQueryBuilder WithIsSleep(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSleep", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsSleep()
        {
            return ExceptField("isSleep");
        }

        public ModifierTypeQueryBuilder WithIsCyclone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCyclone", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsCyclone()
        {
            return ExceptField("isCyclone");
        }

        public ModifierTypeQueryBuilder WithIsTaunt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTaunt", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsTaunt()
        {
            return ExceptField("isTaunt");
        }

        public ModifierTypeQueryBuilder WithIsDisarm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDisarm", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsDisarm()
        {
            return ExceptField("isDisarm");
        }

        public ModifierTypeQueryBuilder WithIsBlind(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBlind", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBlind()
        {
            return ExceptField("isBlind");
        }

        public ModifierTypeQueryBuilder WithIsEthereal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isEthereal", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsEthereal()
        {
            return ExceptField("isEthereal");
        }

        public ModifierTypeQueryBuilder WithIsMovementSlow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMovementSlow", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMovementSlow()
        {
            return ExceptField("isMovementSlow");
        }

        public ModifierTypeQueryBuilder WithIsAttackSlow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttackSlow", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsAttackSlow()
        {
            return ExceptField("isAttackSlow");
        }

        public ModifierTypeQueryBuilder WithIsBreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBreak", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBreak()
        {
            return ExceptField("isBreak");
        }

        public ModifierTypeQueryBuilder WithIsArmorReduce(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isArmorReduce", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsArmorReduce()
        {
            return ExceptField("isArmorReduce");
        }

        public ModifierTypeQueryBuilder WithIsAttackReduce(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttackReduce", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsAttackReduce()
        {
            return ExceptField("isAttackReduce");
        }

        public ModifierTypeQueryBuilder WithIsMute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMute", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMute()
        {
            return ExceptField("isMute");
        }

        public ModifierTypeQueryBuilder WithIsDamageAmplified(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDamageAmplified", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsDamageAmplified()
        {
            return ExceptField("isDamageAmplified");
        }

        public ModifierTypeQueryBuilder WithIsMovementDebuff(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMovementDebuff", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMovementDebuff()
        {
            return ExceptField("isMovementDebuff");
        }

        public ModifierTypeQueryBuilder WithIsKnockback(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isKnockback", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsKnockback()
        {
            return ExceptField("isKnockback");
        }

        public ModifierTypeQueryBuilder WithIsWeaken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isWeaken", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsWeaken()
        {
            return ExceptField("isWeaken");
        }

        public ModifierTypeQueryBuilder WithIsItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isItem", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsItem()
        {
            return ExceptField("isItem");
        }

        public ModifierTypeQueryBuilder WithIsBanished(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBanished", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBanished()
        {
            return ExceptField("isBanished");
        }
    }
}
