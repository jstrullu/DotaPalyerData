// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class AghanimLabRoomTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabRoomTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "difficulty" },
                new FieldMetadata { Name = "encounterId" },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "pickCount" },
                new FieldMetadata { Name = "deathCount" },
                new FieldMetadata { Name = "eliteMatchCount" },
                new FieldMetadata { Name = "eliteWinCount" },
                new FieldMetadata { Name = "elitePickCount" },
                new FieldMetadata { Name = "eliteDeathCount" }
            };

        protected override string TypeName { get { return "AghanimLabRoomType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabRoomTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabRoomTypeQueryBuilder WithEncounterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("encounterId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEncounterId()
        {
            return ExceptField("encounterId");
        }

        public AghanimLabRoomTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptDeathCount()
        {
            return ExceptField("deathCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteMatchCount()
        {
            return ExceptField("eliteMatchCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteWinCount()
        {
            return ExceptField("eliteWinCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithElitePickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("elitePickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptElitePickCount()
        {
            return ExceptField("elitePickCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteDeathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteDeathCount()
        {
            return ExceptField("eliteDeathCount");
        }
    }
}
