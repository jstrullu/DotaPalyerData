// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class KillDetailTypeQueryBuilder : GraphQlQueryBuilder<KillDetailTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "time" },
                new FieldMetadata { Name = "attacker", IsComplex = true },
                new FieldMetadata { Name = "isFromIllusion" },
                new FieldMetadata { Name = "target", IsComplex = true },
                new FieldMetadata { Name = "byAbility", IsComplex = true },
                new FieldMetadata { Name = "byItem", IsComplex = true },
                new FieldMetadata { Name = "gold" },
                new FieldMetadata { Name = "xp" },
                new FieldMetadata { Name = "positionX" },
                new FieldMetadata { Name = "positionY" },
                new FieldMetadata { Name = "assist", IsComplex = true },
                new FieldMetadata { Name = "isSolo" },
                new FieldMetadata { Name = "isGank" },
                new FieldMetadata { Name = "isInvisible" },
                new FieldMetadata { Name = "isSmoke" },
                new FieldMetadata { Name = "isTpRecently" },
                new FieldMetadata { Name = "isRuneEffected" }
            };

        protected override string TypeName { get { return "KillDetailType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public KillDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public KillDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public KillDetailTypeQueryBuilder WithIsFromIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFromIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsFromIllusion()
        {
            return ExceptField("isFromIllusion");
        }

        public KillDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public KillDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public KillDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public KillDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public KillDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public KillDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public KillDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public KillDetailTypeQueryBuilder WithAssist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assist", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptAssist()
        {
            return ExceptField("assist");
        }

        public KillDetailTypeQueryBuilder WithIsSolo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSolo", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsSolo()
        {
            return ExceptField("isSolo");
        }

        public KillDetailTypeQueryBuilder WithIsGank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGank", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsGank()
        {
            return ExceptField("isGank");
        }

        public KillDetailTypeQueryBuilder WithIsInvisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInvisible", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsInvisible()
        {
            return ExceptField("isInvisible");
        }

        public KillDetailTypeQueryBuilder WithIsSmoke(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSmoke", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsSmoke()
        {
            return ExceptField("isSmoke");
        }

        public KillDetailTypeQueryBuilder WithIsTpRecently(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTpRecently", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsTpRecently()
        {
            return ExceptField("isTpRecently");
        }

        public KillDetailTypeQueryBuilder WithIsRuneEffected(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRuneEffected", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsRuneEffected()
        {
            return ExceptField("isRuneEffected");
        }
    }
}
