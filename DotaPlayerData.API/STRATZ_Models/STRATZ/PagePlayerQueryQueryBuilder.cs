// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PagePlayerQueryQueryBuilder : GraphQlQueryBuilder<PagePlayerQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "conduct", IsComplex = true, QueryBuilderType = typeof(PlayerConductResponseTypeQueryBuilder) },
                new FieldMetadata { Name = "simpleSummary", IsComplex = true, QueryBuilderType = typeof(PlayerCardHoverTypeQueryBuilder) },
                new FieldMetadata { Name = "performance", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new FieldMetadata { Name = "heroPerformance", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new FieldMetadata { Name = "heroesPerformance", IsComplex = true, QueryBuilderType = typeof(PlayerHeroesPerformanceTypeQueryBuilder) },
                new FieldMetadata { Name = "playedWithPro", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTypeQueryBuilder) },
                new FieldMetadata { Name = "breakdown", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownTypeQueryBuilder) },
                new FieldMetadata { Name = "peers", IsComplex = true, QueryBuilderType = typeof(PlayerTeammateTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PagePlayerQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PagePlayerQueryQueryBuilder WithConduct(PlayerConductResponseTypeQueryBuilder playerConductResponseTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("conduct", alias, playerConductResponseTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptConduct()
        {
            return ExceptField("conduct");
        }

        public PagePlayerQueryQueryBuilder WithSimpleSummary(PlayerCardHoverTypeQueryBuilder playerCardHoverTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("simpleSummary", alias, playerCardHoverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptSimpleSummary()
        {
            return ExceptField("simpleSummary");
        }

        public PagePlayerQueryQueryBuilder WithPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, QueryBuilderParameter<PlayerPerformanceMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("performance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptPerformance()
        {
            return ExceptField("performance");
        }

        public PagePlayerQueryQueryBuilder WithHeroPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, QueryBuilderParameter<object> heroId, QueryBuilderParameter<PlayerHeroPerformanceMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroPerformance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptHeroPerformance()
        {
            return ExceptField("heroPerformance");
        }

        public PagePlayerQueryQueryBuilder WithHeroesPerformance(PlayerHeroesPerformanceTypeQueryBuilder playerHeroesPerformanceTypeQueryBuilder, QueryBuilderParameter<PlayerHeroesPerformanceMatchesRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("heroesPerformance", alias, playerHeroesPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptHeroesPerformance()
        {
            return ExceptField("heroesPerformance");
        }

        public PagePlayerQueryQueryBuilder WithPlayedWithPro(PlayerPlayedWithProTypeQueryBuilder playerPlayedWithProTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playedWithPro", alias, playerPlayedWithProTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptPlayedWithPro()
        {
            return ExceptField("playedWithPro");
        }

        public PagePlayerQueryQueryBuilder WithBreakdown(PlayerBreakdownTypeQueryBuilder playerBreakdownTypeQueryBuilder, QueryBuilderParameter<PlayerBreakdownRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("breakdown", alias, playerBreakdownTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptBreakdown()
        {
            return ExceptField("breakdown");
        }

        public PagePlayerQueryQueryBuilder WithPeers(PlayerTeammateTypeQueryBuilder playerTeammateTypeQueryBuilder, QueryBuilderParameter<PlayerTeammatesGroupByRequestType> request, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("peers", alias, playerTeammateTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptPeers()
        {
            return ExceptField("peers");
        }
    }
}
