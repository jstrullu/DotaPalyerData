// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DireTide2020CustomGameMatchTypeQueryBuilder : GraphQlQueryBuilder<DireTide2020CustomGameMatchTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "didRadiantWin" },
                new FieldMetadata { Name = "durationSeconds", IsComplex = true },
                new FieldMetadata { Name = "startDateTime", IsComplex = true },
                new FieldMetadata { Name = "endDateTime", IsComplex = true },
                new FieldMetadata { Name = "clusterId", IsComplex = true },
                new FieldMetadata { Name = "replaySalt", IsComplex = true },
                new FieldMetadata { Name = "candyLost", IsComplex = true },
                new FieldMetadata { Name = "candyPickedUp", IsComplex = true },
                new FieldMetadata { Name = "candyScored", IsComplex = true },
                new FieldMetadata { Name = "radiantCandyScored", IsComplex = true },
                new FieldMetadata { Name = "direCandyScored", IsComplex = true },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(DireTide2020CustomGamePlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DireTide2020CustomGameMatchType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DireTide2020CustomGameMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithCandyLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyLost", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptCandyLost()
        {
            return ExceptField("candyLost");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithCandyPickedUp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyPickedUp", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptCandyPickedUp()
        {
            return ExceptField("candyPickedUp");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptCandyScored()
        {
            return ExceptField("candyScored");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithRadiantCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantCandyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptRadiantCandyScored()
        {
            return ExceptField("radiantCandyScored");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithDireCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direCandyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptDireCandyScored()
        {
            return ExceptField("direCandyScored");
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder WithPlayers(DireTide2020CustomGamePlayerTypeQueryBuilder direTide2020CustomGamePlayerTypeQueryBuilder, QueryBuilderParameter<object> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, direTide2020CustomGamePlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DireTide2020CustomGameMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }
}
