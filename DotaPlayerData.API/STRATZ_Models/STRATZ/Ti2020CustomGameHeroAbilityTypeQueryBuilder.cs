// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class Ti2020CustomGameHeroAbilityTypeQueryBuilder : GraphQlQueryBuilder<Ti2020CustomGameHeroAbilityTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "difficulty" },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "customAbilityId", IsComplex = true },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "pickCount" }
            };

        protected override string TypeName { get { return "TI2020CustomGameHeroAbilityType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithCustomAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptCustomAbilityId()
        {
            return ExceptField("customAbilityId");
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameHeroAbilityTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }
    }
}
