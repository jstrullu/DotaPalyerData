// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class BattlepassPredictionTeamTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionTeamTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "teamId" },
                new FieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "mostKills" },
                new FieldMetadata { Name = "killAvg" },
                new FieldMetadata { Name = "leastDeaths" },
                new FieldMetadata { Name = "mostAssists" },
                new FieldMetadata { Name = "longestGameSeconds" },
                new FieldMetadata { Name = "shortestGameSeconds" },
                new FieldMetadata { Name = "gameSecondsAvg" },
                new FieldMetadata { Name = "heroCount" }
            };

        protected override string TypeName { get { return "BattlepassPredictionTeamType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMostKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostKills", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMostKills()
        {
            return ExceptField("mostKills");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithKillAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptKillAvg()
        {
            return ExceptField("killAvg");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithLeastDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leastDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptLeastDeaths()
        {
            return ExceptField("leastDeaths");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMostAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMostAssists()
        {
            return ExceptField("mostAssists");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithLongestGameSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longestGameSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptLongestGameSeconds()
        {
            return ExceptField("longestGameSeconds");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithShortestGameSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortestGameSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptShortestGameSeconds()
        {
            return ExceptField("shortestGameSeconds");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithGameSecondsAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameSecondsAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptGameSecondsAvg()
        {
            return ExceptField("gameSecondsAvg");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithHeroCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptHeroCount()
        {
            return ExceptField("heroCount");
        }
    }
}
