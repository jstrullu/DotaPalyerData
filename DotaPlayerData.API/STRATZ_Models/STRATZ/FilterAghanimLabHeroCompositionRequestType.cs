// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class FilterAghanimLabHeroCompositionRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _difficulty;
        private InputPropertyInfo _orderDirection;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AghanimLabMatchDifficultyEnum?>))]
        #endif
        public QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> Difficulty
        {
            get { return (QueryBuilderParameter<AghanimLabMatchDifficultyEnum?>)_difficulty.Value; }
            set { _difficulty = new InputPropertyInfo { Name = "difficulty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> OrderDirection
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_orderDirection.Value; }
            set { _orderDirection = new InputPropertyInfo { Name = "orderDirection", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_difficulty.Name != null) yield return _difficulty;
            if (_orderDirection.Name != null) yield return _orderDirection;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }
}
