// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class AbilityTypeQueryBuilder : GraphQlQueryBuilder<AbilityTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "uri" },
                new FieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(AbilityLanguageTypeQueryBuilder) },
                new FieldMetadata { Name = "stat", IsComplex = true, QueryBuilderType = typeof(AbilityStatTypeQueryBuilder) },
                new FieldMetadata { Name = "attributes", IsComplex = true, QueryBuilderType = typeof(AbilityAttributeTypeQueryBuilder) },
                new FieldMetadata { Name = "isTalent" }
            };

        protected override string TypeName { get { return "AbilityType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AbilityTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AbilityTypeQueryBuilder WithUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uri", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptUri()
        {
            return ExceptField("uri");
        }

        public AbilityTypeQueryBuilder WithLanguage(AbilityLanguageTypeQueryBuilder abilityLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, abilityLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public AbilityTypeQueryBuilder WithStat(AbilityStatTypeQueryBuilder abilityStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stat", alias, abilityStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptStat()
        {
            return ExceptField("stat");
        }

        public AbilityTypeQueryBuilder WithAttributes(AbilityAttributeTypeQueryBuilder abilityAttributeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("attributes", alias, abilityAttributeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public AbilityTypeQueryBuilder WithIsTalent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTalent", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptIsTalent()
        {
            return ExceptField("isTalent");
        }
    }
}
