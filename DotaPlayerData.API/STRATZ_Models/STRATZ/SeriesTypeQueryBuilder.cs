// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class SeriesTypeQueryBuilder : GraphQlQueryBuilder<SeriesTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "teamOneId" },
                new FieldMetadata { Name = "teamTwoId" },
                new FieldMetadata { Name = "leagueId" },
                new FieldMetadata { Name = "teamOneWinCount", IsComplex = true },
                new FieldMetadata { Name = "teamTwoWinCount", IsComplex = true },
                new FieldMetadata { Name = "winningTeamId" },
                new FieldMetadata { Name = "lastMatchDateTime", IsComplex = true },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "teamOne", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "teamTwo", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(LeagueNodeTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SeriesType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeriesTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SeriesTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public SeriesTypeQueryBuilder WithTeamOneId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOneId()
        {
            return ExceptField("teamOneId");
        }

        public SeriesTypeQueryBuilder WithTeamTwoId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwoId()
        {
            return ExceptField("teamTwoId");
        }

        public SeriesTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public SeriesTypeQueryBuilder WithTeamOneWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOneWinCount()
        {
            return ExceptField("teamOneWinCount");
        }

        public SeriesTypeQueryBuilder WithTeamTwoWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwoWinCount()
        {
            return ExceptField("teamTwoWinCount");
        }

        public SeriesTypeQueryBuilder WithWinningTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winningTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptWinningTeamId()
        {
            return ExceptField("winningTeamId");
        }

        public SeriesTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public SeriesTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public SeriesTypeQueryBuilder WithTeamOne(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamOne", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOne()
        {
            return ExceptField("teamOne");
        }

        public SeriesTypeQueryBuilder WithTeamTwo(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamTwo", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwo()
        {
            return ExceptField("teamTwo");
        }

        public SeriesTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public SeriesTypeQueryBuilder WithNode(LeagueNodeTypeQueryBuilder leagueNodeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, leagueNodeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }
}
