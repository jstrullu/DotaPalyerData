// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class FeedTypeQueryBuilder : GraphQlQueryBuilder<FeedTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "targetSteamAccountId", IsComplex = true },
                new FieldMetadata { Name = "type", IsComplex = true },
                new FieldMetadata { Name = "matchId", IsComplex = true },
                new FieldMetadata { Name = "heroId" },
                new FieldMetadata { Name = "date", IsComplex = true },
                new FieldMetadata { Name = "value" },
                new FieldMetadata { Name = "didWin" }
            };

        protected override string TypeName { get { return "FeedType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeedTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public FeedTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public FeedTypeQueryBuilder WithTargetSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSteamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptTargetSteamAccountId()
        {
            return ExceptField("targetSteamAccountId");
        }

        public FeedTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FeedTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public FeedTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public FeedTypeQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public FeedTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public FeedTypeQueryBuilder WithDidWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didWin", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptDidWin()
        {
            return ExceptField("didWin");
        }
    }
}
