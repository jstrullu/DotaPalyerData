// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class DotaMutationQueryBuilder : GraphQlQueryBuilder<DotaMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "yogurt", IsComplex = true, QueryBuilderType = typeof(YogurtMutationQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(DotaUserMutationQueryBuilder) },
                new FieldMetadata { Name = "admin", IsComplex = true, QueryBuilderType = typeof(AdminMutationQueryBuilder) },
                new FieldMetadata { Name = "rosh", IsComplex = true, QueryBuilderType = typeof(RoshMutationQueryBuilder) },
                new FieldMetadata { Name = "retryMatchDownload" }
            };

        protected override string TypeName { get { return "DotaMutation"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaMutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public DotaMutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaMutationQueryBuilder WithYogurt(YogurtMutationQueryBuilder yogurtMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("yogurt", alias, yogurtMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptYogurt()
        {
            return ExceptField("yogurt");
        }

        public DotaMutationQueryBuilder WithUser(DotaUserMutationQueryBuilder dotaUserMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, dotaUserMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public DotaMutationQueryBuilder WithAdmin(AdminMutationQueryBuilder adminMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("admin", alias, adminMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptAdmin()
        {
            return ExceptField("admin");
        }

        public DotaMutationQueryBuilder WithRosh(RoshMutationQueryBuilder roshMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rosh", alias, roshMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptRosh()
        {
            return ExceptField("rosh");
        }

        public DotaMutationQueryBuilder WithRetryMatchDownload(QueryBuilderParameter<object> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("retryMatchDownload", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaMutationQueryBuilder ExceptRetryMatchDownload()
        {
            return ExceptField("retryMatchDownload");
        }
    }
}
