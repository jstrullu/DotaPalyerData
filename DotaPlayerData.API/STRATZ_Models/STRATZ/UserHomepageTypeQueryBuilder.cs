// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class UserHomepageTypeQueryBuilder : GraphQlQueryBuilder<UserHomepageTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "blogs", IsComplex = true, QueryBuilderType = typeof(BlogTypeQueryBuilder) },
                new FieldMetadata { Name = "upcomingLeagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "inProgressLeagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "leagueMetas", IsComplex = true, QueryBuilderType = typeof(LeagueMetaTypeQueryBuilder) },
                new FieldMetadata { Name = "topProPlayers", IsComplex = true, QueryBuilderType = typeof(ProPlayerFollowTypeQueryBuilder) },
                new FieldMetadata { Name = "topPlayersByHeroType", IsComplex = true, QueryBuilderType = typeof(TopPlayersByHeroTypeQueryBuilder) },
                new FieldMetadata { Name = "topSynergiesByHero", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "matchAwards", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "recentRampages", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "recentWinStreaks", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "recentHighImps", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "recentMatches", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "activeLeagueGames", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "topLiveGames", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new FieldMetadata { Name = "totalComponents" }
            };

        protected override string TypeName { get { return "UserHomepageType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserHomepageTypeQueryBuilder WithBlogs(BlogTypeQueryBuilder blogTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedBlogIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedBlogIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedBlogIds", ArgumentValue = excludedBlogIds} );

            return WithObjectField("blogs", alias, blogTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptBlogs()
        {
            return ExceptField("blogs");
        }

        public UserHomepageTypeQueryBuilder WithUpcomingLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("upcomingLeagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptUpcomingLeagues()
        {
            return ExceptField("upcomingLeagues");
        }

        public UserHomepageTypeQueryBuilder WithInProgressLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("inProgressLeagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptInProgressLeagues()
        {
            return ExceptField("inProgressLeagues");
        }

        public UserHomepageTypeQueryBuilder WithLeagueMetas(LeagueMetaTypeQueryBuilder leagueMetaTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("leagueMetas", alias, leagueMetaTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptLeagueMetas()
        {
            return ExceptField("leagueMetas");
        }

        public UserHomepageTypeQueryBuilder WithTopProPlayers(ProPlayerFollowTypeQueryBuilder proPlayerFollowTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("topProPlayers", alias, proPlayerFollowTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopProPlayers()
        {
            return ExceptField("topProPlayers");
        }

        public UserHomepageTypeQueryBuilder WithTopPlayersByHeroType(TopPlayersByHeroTypeQueryBuilder topPlayersByHeroTypeQueryBuilder, QueryBuilderParameter<int?> heroComponentsTake = null, QueryBuilderParameter<int?> playersTake = null, QueryBuilderParameter<int?> heroIds = null, QueryBuilderParameter<int?> rankBracketIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroComponentsTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroComponentsTake", ArgumentValue = heroComponentsTake} );

            if (playersTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "playersTake", ArgumentValue = playersTake} );

            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (rankBracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rankBracketIds", ArgumentValue = rankBracketIds} );

            return WithObjectField("topPlayersByHeroType", alias, topPlayersByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopPlayersByHeroType()
        {
            return ExceptField("topPlayersByHeroType");
        }

        public UserHomepageTypeQueryBuilder WithTopSynergiesByHero(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> synergyComponentsTake = null, QueryBuilderParameter<int?> heroIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (synergyComponentsTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "synergyComponentsTake", ArgumentValue = synergyComponentsTake} );

            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            return WithObjectField("topSynergiesByHero", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopSynergiesByHero()
        {
            return ExceptField("topSynergiesByHero");
        }

        public UserHomepageTypeQueryBuilder WithMatchAwards(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<object>> matchPlayerAwardTypeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (matchPlayerAwardTypeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchPlayerAwardTypeIds", ArgumentValue = matchPlayerAwardTypeIds} );

            return WithObjectField("matchAwards", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptMatchAwards()
        {
            return ExceptField("matchAwards");
        }

        public UserHomepageTypeQueryBuilder WithRecentRampages(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentRampages", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentRampages()
        {
            return ExceptField("recentRampages");
        }

        public UserHomepageTypeQueryBuilder WithRecentWinStreaks(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentWinStreaks", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentWinStreaks()
        {
            return ExceptField("recentWinStreaks");
        }

        public UserHomepageTypeQueryBuilder WithRecentHighImps(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentHighImps", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentHighImps()
        {
            return ExceptField("recentHighImps");
        }

        public UserHomepageTypeQueryBuilder WithRecentMatches(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentMatches", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentMatches()
        {
            return ExceptField("recentMatches");
        }

        public UserHomepageTypeQueryBuilder WithActiveLeagueGames(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("activeLeagueGames", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptActiveLeagueGames()
        {
            return ExceptField("activeLeagueGames");
        }

        public UserHomepageTypeQueryBuilder WithTopLiveGames(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("topLiveGames", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopLiveGames()
        {
            return ExceptField("topLiveGames");
        }

        public UserHomepageTypeQueryBuilder WithTotalComponents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalComponents", alias, new GraphQlDirective[] { include, skip });
        }

        public UserHomepageTypeQueryBuilder ExceptTotalComponents()
        {
            return ExceptField("totalComponents");
        }
    }
}
