// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchmakingStatsTypeQueryBuilder : GraphQlQueryBuilder<MatchmakingStatsTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "time", IsComplex = true },
                new FieldMetadata { Name = "uSWest" },
                new FieldMetadata { Name = "uSEast" },
                new FieldMetadata { Name = "europe" },
                new FieldMetadata { Name = "singapore" },
                new FieldMetadata { Name = "brazil" },
                new FieldMetadata { Name = "stockholm" },
                new FieldMetadata { Name = "austria" },
                new FieldMetadata { Name = "australia" },
                new FieldMetadata { Name = "southAfrica" },
                new FieldMetadata { Name = "perfectWorldTelecom" },
                new FieldMetadata { Name = "perfectWorldUnicom" },
                new FieldMetadata { Name = "dubai" },
                new FieldMetadata { Name = "chile" },
                new FieldMetadata { Name = "peru" },
                new FieldMetadata { Name = "india" },
                new FieldMetadata { Name = "perfectWorldTelecomGuangdong" },
                new FieldMetadata { Name = "perfectWorldTelecomZhejiang" },
                new FieldMetadata { Name = "japan" },
                new FieldMetadata { Name = "perfectWorldTelecomWuhan" },
                new FieldMetadata { Name = "taiwan" },
                new FieldMetadata { Name = "perfectWorldUnicomTianjin" }
            };

        protected override string TypeName { get { return "MatchmakingStatsType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchmakingStatsTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchmakingStatsTypeQueryBuilder WithUsWest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uSWest", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptUsWest()
        {
            return ExceptField("uSWest");
        }

        public MatchmakingStatsTypeQueryBuilder WithUsEast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uSEast", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptUsEast()
        {
            return ExceptField("uSEast");
        }

        public MatchmakingStatsTypeQueryBuilder WithEurope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("europe", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptEurope()
        {
            return ExceptField("europe");
        }

        public MatchmakingStatsTypeQueryBuilder WithSingapore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("singapore", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptSingapore()
        {
            return ExceptField("singapore");
        }

        public MatchmakingStatsTypeQueryBuilder WithBrazil(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("brazil", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptBrazil()
        {
            return ExceptField("brazil");
        }

        public MatchmakingStatsTypeQueryBuilder WithStockholm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stockholm", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptStockholm()
        {
            return ExceptField("stockholm");
        }

        public MatchmakingStatsTypeQueryBuilder WithAustria(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("austria", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptAustria()
        {
            return ExceptField("austria");
        }

        public MatchmakingStatsTypeQueryBuilder WithAustralia(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("australia", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptAustralia()
        {
            return ExceptField("australia");
        }

        public MatchmakingStatsTypeQueryBuilder WithSouthAfrica(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("southAfrica", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptSouthAfrica()
        {
            return ExceptField("southAfrica");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecom()
        {
            return ExceptField("perfectWorldTelecom");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldUnicom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldUnicom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldUnicom()
        {
            return ExceptField("perfectWorldUnicom");
        }

        public MatchmakingStatsTypeQueryBuilder WithDubai(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubai", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptDubai()
        {
            return ExceptField("dubai");
        }

        public MatchmakingStatsTypeQueryBuilder WithChile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chile", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptChile()
        {
            return ExceptField("chile");
        }

        public MatchmakingStatsTypeQueryBuilder WithPeru(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("peru", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPeru()
        {
            return ExceptField("peru");
        }

        public MatchmakingStatsTypeQueryBuilder WithIndia(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("india", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptIndia()
        {
            return ExceptField("india");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomGuangdong(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomGuangdong", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomGuangdong()
        {
            return ExceptField("perfectWorldTelecomGuangdong");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomZhejiang(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomZhejiang", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomZhejiang()
        {
            return ExceptField("perfectWorldTelecomZhejiang");
        }

        public MatchmakingStatsTypeQueryBuilder WithJapan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("japan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptJapan()
        {
            return ExceptField("japan");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomWuhan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomWuhan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomWuhan()
        {
            return ExceptField("perfectWorldTelecomWuhan");
        }

        public MatchmakingStatsTypeQueryBuilder WithTaiwan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taiwan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptTaiwan()
        {
            return ExceptField("taiwan");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldUnicomTianjin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldUnicomTianjin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldUnicomTianjin()
        {
            return ExceptField("perfectWorldUnicomTianjin");
        }
    }
}
