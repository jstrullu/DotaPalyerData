// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroMetaTrendTypeQueryBuilder : GraphQlQueryBuilder<HeroMetaTrendTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId" },
                new FieldMetadata { Name = "win", IsComplex = true },
                new FieldMetadata { Name = "pick", IsComplex = true },
                new FieldMetadata { Name = "ban", IsComplex = true }
            };

        protected override string TypeName { get { return "HeroMetaTrendType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroMetaTrendTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroMetaTrendTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroMetaTrendTypeQueryBuilder WithWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("win", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroMetaTrendTypeQueryBuilder ExceptWin()
        {
            return ExceptField("win");
        }

        public HeroMetaTrendTypeQueryBuilder WithPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pick", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroMetaTrendTypeQueryBuilder ExceptPick()
        {
            return ExceptField("pick");
        }

        public HeroMetaTrendTypeQueryBuilder WithBan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ban", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroMetaTrendTypeQueryBuilder ExceptBan()
        {
            return ExceptField("ban");
        }
    }
}
