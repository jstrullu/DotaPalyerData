// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchPickBanGroupByTypeQueryBuilder : GraphQlQueryBuilder<MatchPickBanGroupByTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "pickCount" },
                new FieldMetadata { Name = "banCount" }
            };

        protected override string TypeName { get { return "MatchPickBanGroupByType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPickBanGroupByTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }
    }
}
