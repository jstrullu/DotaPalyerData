// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class TeamPrizeTypeQueryBuilder : GraphQlQueryBuilder<TeamPrizeTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "leagueId" },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "teamId" },
                new FieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "standing" },
                new FieldMetadata { Name = "prizeAmount" }
            };

        protected override string TypeName { get { return "TeamPrizeType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TeamPrizeTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public TeamPrizeTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public TeamPrizeTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public TeamPrizeTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public TeamPrizeTypeQueryBuilder WithStanding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("standing", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptStanding()
        {
            return ExceptField("standing");
        }

        public TeamPrizeTypeQueryBuilder WithPrizeAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("prizeAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptPrizeAmount()
        {
            return ExceptField("prizeAmount");
        }
    }
}
