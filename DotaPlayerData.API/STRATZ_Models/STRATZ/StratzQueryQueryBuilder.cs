// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class StratzQueryQueryBuilder : GraphQlQueryBuilder<StratzQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "admin", IsComplex = true, QueryBuilderType = typeof(AdminQueryQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryQueryBuilder) },
                new FieldMetadata { Name = "page", IsComplex = true, QueryBuilderType = typeof(PageQueryQueryBuilder) },
                new FieldMetadata { Name = "blogs", IsComplex = true, QueryBuilderType = typeof(BlogTypeQueryBuilder) },
                new FieldMetadata { Name = "news", IsComplex = true, QueryBuilderType = typeof(NewsItemTypeQueryBuilder) },
                new FieldMetadata { Name = "ticker", IsComplex = true },
                new FieldMetadata { Name = "status", IsComplex = true, QueryBuilderType = typeof(ServerStatusTypeQueryBuilder) },
                new FieldMetadata { Name = "languages", IsComplex = true, QueryBuilderType = typeof(LanguageTypeQueryBuilder) },
                new FieldMetadata { Name = "matchRetry" },
                new FieldMetadata { Name = "search", IsComplex = true, QueryBuilderType = typeof(SearchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "StratzQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StratzQueryQueryBuilder WithAdmin(AdminQueryQueryBuilder adminQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("admin", alias, adminQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptAdmin()
        {
            return ExceptField("admin");
        }

        public StratzQueryQueryBuilder WithUser(UserQueryQueryBuilder userQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public StratzQueryQueryBuilder WithPage(PageQueryQueryBuilder pageQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("page", alias, pageQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptPage()
        {
            return ExceptField("page");
        }

        public StratzQueryQueryBuilder WithBlogs(BlogTypeQueryBuilder blogTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("blogs", alias, blogTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public StratzQueryQueryBuilder ExceptBlogs()
        {
            return ExceptField("blogs");
        }

        public StratzQueryQueryBuilder WithNews(NewsItemTypeQueryBuilder newsItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("news", alias, newsItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptNews()
        {
            return ExceptField("news");
        }

        public StratzQueryQueryBuilder WithTicker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ticker", alias, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptTicker()
        {
            return ExceptField("ticker");
        }

        public StratzQueryQueryBuilder WithStatus(ServerStatusTypeQueryBuilder serverStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("status", alias, serverStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public StratzQueryQueryBuilder WithLanguages(LanguageTypeQueryBuilder languageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("languages", alias, languageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptLanguages()
        {
            return ExceptField("languages");
        }

        public StratzQueryQueryBuilder WithMatchRetry(QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithScalarField("matchRetry", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public StratzQueryQueryBuilder ExceptMatchRetry()
        {
            return ExceptField("matchRetry");
        }

        public StratzQueryQueryBuilder WithSearch(SearchTypeQueryBuilder searchTypeQueryBuilder, QueryBuilderParameter<FilterSearchRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("search", alias, searchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StratzQueryQueryBuilder ExceptSearch()
        {
            return ExceptField("search");
        }
    }
}
