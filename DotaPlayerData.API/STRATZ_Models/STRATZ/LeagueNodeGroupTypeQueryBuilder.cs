// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueNodeGroupTypeQueryBuilder : GraphQlQueryBuilder<LeagueNodeGroupTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "parentNodeGroupId", IsComplex = true },
                new FieldMetadata { Name = "advancingNodeGroupId", IsComplex = true },
                new FieldMetadata { Name = "advancingTeamCount", IsComplex = true },
                new FieldMetadata { Name = "teamCount", IsComplex = true },
                new FieldMetadata { Name = "defaultNodeType" },
                new FieldMetadata { Name = "nodeGroupType" },
                new FieldMetadata { Name = "round", IsComplex = true },
                new FieldMetadata { Name = "maxRounds", IsComplex = true },
                new FieldMetadata { Name = "isTieBreaker" },
                new FieldMetadata { Name = "isFinalGroup" },
                new FieldMetadata { Name = "isCompleted" },
                new FieldMetadata { Name = "phase", IsComplex = true },
                new FieldMetadata { Name = "region", IsComplex = true },
                new FieldMetadata { Name = "startDate", IsComplex = true },
                new FieldMetadata { Name = "endDate", IsComplex = true },
                new FieldMetadata { Name = "secondaryAdvancingNodeGroupId", IsComplex = true },
                new FieldMetadata { Name = "secondaryAdvancingTeamCount", IsComplex = true },
                new FieldMetadata { Name = "tertiaryAdvancingNodeGroupId", IsComplex = true },
                new FieldMetadata { Name = "tertiaryAdvancingTeamCount", IsComplex = true },
                new FieldMetadata { Name = "eliminationDPCPoints" },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(LeagueNodeTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueNodeGroupType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueNodeGroupTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueNodeGroupTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueNodeGroupTypeQueryBuilder WithParentNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptParentNodeGroupId()
        {
            return ExceptField("parentNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptAdvancingNodeGroupId()
        {
            return ExceptField("advancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptAdvancingTeamCount()
        {
            return ExceptField("advancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTeamCount()
        {
            return ExceptField("teamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithDefaultNodeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("defaultNodeType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptDefaultNodeType()
        {
            return ExceptField("defaultNodeType");
        }

        public LeagueNodeGroupTypeQueryBuilder WithNodeGroupType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeGroupType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptNodeGroupType()
        {
            return ExceptField("nodeGroupType");
        }

        public LeagueNodeGroupTypeQueryBuilder WithRound(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("round", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptRound()
        {
            return ExceptField("round");
        }

        public LeagueNodeGroupTypeQueryBuilder WithMaxRounds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxRounds", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptMaxRounds()
        {
            return ExceptField("maxRounds");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsTieBreaker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTieBreaker", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsTieBreaker()
        {
            return ExceptField("isTieBreaker");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsFinalGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFinalGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsFinalGroup()
        {
            return ExceptField("isFinalGroup");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsCompleted()
        {
            return ExceptField("isCompleted");
        }

        public LeagueNodeGroupTypeQueryBuilder WithPhase(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phase", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptPhase()
        {
            return ExceptField("phase");
        }

        public LeagueNodeGroupTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public LeagueNodeGroupTypeQueryBuilder WithStartDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }

        public LeagueNodeGroupTypeQueryBuilder WithEndDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptEndDate()
        {
            return ExceptField("endDate");
        }

        public LeagueNodeGroupTypeQueryBuilder WithSecondaryAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryAdvancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptSecondaryAdvancingNodeGroupId()
        {
            return ExceptField("secondaryAdvancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithSecondaryAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryAdvancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptSecondaryAdvancingTeamCount()
        {
            return ExceptField("secondaryAdvancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTertiaryAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tertiaryAdvancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTertiaryAdvancingNodeGroupId()
        {
            return ExceptField("tertiaryAdvancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTertiaryAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tertiaryAdvancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTertiaryAdvancingTeamCount()
        {
            return ExceptField("tertiaryAdvancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithEliminationDpcPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliminationDPCPoints", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptEliminationDpcPoints()
        {
            return ExceptField("eliminationDPCPoints");
        }

        public LeagueNodeGroupTypeQueryBuilder WithNodes(LeagueNodeTypeQueryBuilder leagueNodeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, leagueNodeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }
}
