// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueNodeTypeQueryBuilder : GraphQlQueryBuilder<LeagueNodeTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "nodeGroupId", IsComplex = true },
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "winningNodeId", IsComplex = true },
                new FieldMetadata { Name = "losingNodeId", IsComplex = true },
                new FieldMetadata { Name = "nodeType" },
                new FieldMetadata { Name = "scheduledTime", IsComplex = true },
                new FieldMetadata { Name = "actualTime", IsComplex = true },
                new FieldMetadata { Name = "seriesId", IsComplex = true },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "teamOneId" },
                new FieldMetadata { Name = "teamOne", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "teamTwoId" },
                new FieldMetadata { Name = "teamTwo", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "teamOneWins", IsComplex = true },
                new FieldMetadata { Name = "teamTwoWins", IsComplex = true },
                new FieldMetadata { Name = "hasStarted" },
                new FieldMetadata { Name = "isCompleted" },
                new FieldMetadata { Name = "streamIds", IsComplex = true },
                new FieldMetadata { Name = "streams", IsComplex = true, QueryBuilderType = typeof(LeagueStreamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueNodeType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueNodeTypeQueryBuilder WithNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptNodeGroupId()
        {
            return ExceptField("nodeGroupId");
        }

        public LeagueNodeTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueNodeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueNodeTypeQueryBuilder WithWinningNodeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winningNodeId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptWinningNodeId()
        {
            return ExceptField("winningNodeId");
        }

        public LeagueNodeTypeQueryBuilder WithLosingNodeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("losingNodeId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptLosingNodeId()
        {
            return ExceptField("losingNodeId");
        }

        public LeagueNodeTypeQueryBuilder WithNodeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptNodeType()
        {
            return ExceptField("nodeType");
        }

        public LeagueNodeTypeQueryBuilder WithScheduledTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scheduledTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptScheduledTime()
        {
            return ExceptField("scheduledTime");
        }

        public LeagueNodeTypeQueryBuilder WithActualTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("actualTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptActualTime()
        {
            return ExceptField("actualTime");
        }

        public LeagueNodeTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public LeagueNodeTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOneId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOneId()
        {
            return ExceptField("teamOneId");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOne(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamOne", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOne()
        {
            return ExceptField("teamOne");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwoId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwoId()
        {
            return ExceptField("teamTwoId");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwo(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamTwo", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwo()
        {
            return ExceptField("teamTwo");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOneWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOneWins()
        {
            return ExceptField("teamOneWins");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwoWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwoWins()
        {
            return ExceptField("teamTwoWins");
        }

        public LeagueNodeTypeQueryBuilder WithHasStarted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasStarted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptHasStarted()
        {
            return ExceptField("hasStarted");
        }

        public LeagueNodeTypeQueryBuilder WithIsCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptIsCompleted()
        {
            return ExceptField("isCompleted");
        }

        public LeagueNodeTypeQueryBuilder WithStreamIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streamIds", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptStreamIds()
        {
            return ExceptField("streamIds");
        }

        public LeagueNodeTypeQueryBuilder WithStreams(LeagueStreamTypeQueryBuilder leagueStreamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("streams", alias, leagueStreamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptStreams()
        {
            return ExceptField("streams");
        }
    }
}
