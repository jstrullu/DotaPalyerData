// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class SteamAccountSeasonActiveLeaderboardTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonActiveLeaderboardTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "playerCount" },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder) },
                new FieldMetadata { Name = "countryData", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder) },
                new FieldMetadata { Name = "positionData", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder) },
                new FieldMetadata { Name = "teamData", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "teamIdData", IsComplex = true }
            };

        protected override string TypeName { get { return "SteamAccountSeasonActiveLeaderboardType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPlayers(SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder steamAccountSeasonActiveLeaderboardRankTypeQueryBuilder, QueryBuilderParameter<object> skip = null, QueryBuilderParameter<object> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("players", alias, steamAccountSeasonActiveLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithCountryData(SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder steamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("countryData", alias, steamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptCountryData()
        {
            return ExceptField("countryData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPositionData(SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder steamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("positionData", alias, steamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPositionData()
        {
            return ExceptField("positionData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithTeamData(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamData", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptTeamData()
        {
            return ExceptField("teamData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithTeamIdData(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamIdData", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptTeamIdData()
        {
            return ExceptField("teamIdData");
        }
    }
}
