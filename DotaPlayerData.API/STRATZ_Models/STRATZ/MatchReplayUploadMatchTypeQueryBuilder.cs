// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchReplayUploadMatchTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadMatchTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchUploadTeamId", IsComplex = true },
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "fileName" },
                new FieldMetadata { Name = "uploaderCaptainJackIdentityId", IsComplex = true },
                new FieldMetadata { Name = "isValidated" },
                new FieldMetadata { Name = "isComplete" },
                new FieldMetadata { Name = "isActive" },
                new FieldMetadata { Name = "didRadiantWin" },
                new FieldMetadata { Name = "durationSeconds", IsComplex = true },
                new FieldMetadata { Name = "durationMinutes" },
                new FieldMetadata { Name = "startDateTime", IsComplex = true },
                new FieldMetadata { Name = "endDateTime", IsComplex = true },
                new FieldMetadata { Name = "lobbyType", IsComplex = true },
                new FieldMetadata { Name = "numHumanPlayers", IsComplex = true },
                new FieldMetadata { Name = "numHumanSpectators", IsComplex = true },
                new FieldMetadata { Name = "leagueId" },
                new FieldMetadata { Name = "seriesId", IsComplex = true },
                new FieldMetadata { Name = "gameMode", IsComplex = true },
                new FieldMetadata { Name = "radiantTeamId" },
                new FieldMetadata { Name = "radiantKills", IsComplex = true },
                new FieldMetadata { Name = "direTeamId" },
                new FieldMetadata { Name = "direKills", IsComplex = true },
                new FieldMetadata { Name = "isRadiantFirstPick" },
                new FieldMetadata { Name = "gameVersionId" },
                new FieldMetadata { Name = "notes" },
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "spectators", IsComplex = true },
                new FieldMetadata { Name = "pickBans", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPickBanTypeQueryBuilder) },
                new FieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "direTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadMatchType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadMatchTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithFileName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fileName", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptFileName()
        {
            return ExceptField("fileName");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithUploaderCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uploaderCaptainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptUploaderCaptainJackIdentityId()
        {
            return ExceptField("uploaderCaptainJackIdentityId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsValidated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValidated", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsValidated()
        {
            return ExceptField("isValidated");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsComplete()
        {
            return ExceptField("isComplete");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsActive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isActive", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsActive()
        {
            return ExceptField("isActive");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDurationMinutes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinutes", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDurationMinutes()
        {
            return ExceptField("durationMinutes");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNumHumanSpectators(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanSpectators", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNumHumanSpectators()
        {
            return ExceptField("numHumanSpectators");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantTeamId()
        {
            return ExceptField("radiantTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantKills()
        {
            return ExceptField("radiantKills");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireTeamId()
        {
            return ExceptField("direTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireKills()
        {
            return ExceptField("direKills");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsRadiantFirstPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiantFirstPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsRadiantFirstPick()
        {
            return ExceptField("isRadiantFirstPick");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithPlayers(MatchReplayUploadPlayerTypeQueryBuilder matchReplayUploadPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, matchReplayUploadPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithSpectators(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("spectators", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptSpectators()
        {
            return ExceptField("spectators");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithPickBans(MatchReplayUploadPickBanTypeQueryBuilder matchReplayUploadPickBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pickBans", alias, matchReplayUploadPickBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptPickBans()
        {
            return ExceptField("pickBans");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireTeam()
        {
            return ExceptField("direTeam");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }
    }
}
