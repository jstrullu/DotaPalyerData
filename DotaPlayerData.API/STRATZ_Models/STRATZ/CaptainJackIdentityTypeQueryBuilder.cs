// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class CaptainJackIdentityTypeQueryBuilder : GraphQlQueryBuilder<CaptainJackIdentityTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id", IsComplex = true },
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "profile", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityPublicProfileTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CaptainJackIdentityType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CaptainJackIdentityTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CaptainJackIdentityTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public CaptainJackIdentityTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public CaptainJackIdentityTypeQueryBuilder WithProfile(CaptainJackIdentityPublicProfileTypeQueryBuilder captainJackIdentityPublicProfileTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("profile", alias, captainJackIdentityPublicProfileTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityTypeQueryBuilder ExceptProfile()
        {
            return ExceptField("profile");
        }
    }
}
