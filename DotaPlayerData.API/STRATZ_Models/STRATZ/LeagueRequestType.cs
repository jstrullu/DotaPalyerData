// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _tiers;
        private InputPropertyInfo _requireImage;
        private InputPropertyInfo _requirePrizePool;
        private InputPropertyInfo _requireStartAndEndDates;
        private InputPropertyInfo _hasLiveMatches;
        private InputPropertyInfo _leagueEnded;
        private InputPropertyInfo _isFutureLeague;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _betweenStartDateTime;
        private InputPropertyInfo _betweenEndDateTime;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<int>>))]
        #endif
        public QueryBuilderParameter<IList<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<IList<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<LeagueTier>>))]
        #endif
        public QueryBuilderParameter<IList<LeagueTier>> Tiers
        {
            get { return (QueryBuilderParameter<IList<LeagueTier>>)_tiers.Value; }
            set { _tiers = new InputPropertyInfo { Name = "tiers", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequireImage
        {
            get { return (QueryBuilderParameter<bool?>)_requireImage.Value; }
            set { _requireImage = new InputPropertyInfo { Name = "requireImage", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequirePrizePool
        {
            get { return (QueryBuilderParameter<bool?>)_requirePrizePool.Value; }
            set { _requirePrizePool = new InputPropertyInfo { Name = "requirePrizePool", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequireStartAndEndDates
        {
            get { return (QueryBuilderParameter<bool?>)_requireStartAndEndDates.Value; }
            set { _requireStartAndEndDates = new InputPropertyInfo { Name = "requireStartAndEndDates", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasLiveMatches
        {
            get { return (QueryBuilderParameter<bool?>)_hasLiveMatches.Value; }
            set { _hasLiveMatches = new InputPropertyInfo { Name = "hasLiveMatches", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> LeagueEnded
        {
            get { return (QueryBuilderParameter<bool?>)_leagueEnded.Value; }
            set { _leagueEnded = new InputPropertyInfo { Name = "leagueEnded", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsFutureLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isFutureLeague.Value; }
            set { _isFutureLeague = new InputPropertyInfo { Name = "isFutureLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BetweenStartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_betweenStartDateTime.Value; }
            set { _betweenStartDateTime = new InputPropertyInfo { Name = "betweenStartDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BetweenEndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_betweenEndDateTime.Value; }
            set { _betweenEndDateTime = new InputPropertyInfo { Name = "betweenEndDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_tiers.Name != null) yield return _tiers;
            if (_requireImage.Name != null) yield return _requireImage;
            if (_requirePrizePool.Name != null) yield return _requirePrizePool;
            if (_requireStartAndEndDates.Name != null) yield return _requireStartAndEndDates;
            if (_hasLiveMatches.Name != null) yield return _hasLiveMatches;
            if (_leagueEnded.Name != null) yield return _leagueEnded;
            if (_isFutureLeague.Name != null) yield return _isFutureLeague;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_betweenStartDateTime.Name != null) yield return _betweenStartDateTime;
            if (_betweenEndDateTime.Name != null) yield return _betweenEndDateTime;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }
}
