// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerPlayedWithProTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "playedCount" },
                new FieldMetadata { Name = "totalCount" },
                new FieldMetadata { Name = "casters", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTeamTypeQueryBuilder) },
                new FieldMetadata { Name = "internationalWinners", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTeamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProTypeQueryBuilder WithPlayedCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playedCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptPlayedCount()
        {
            return ExceptField("playedCount");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithCasters(PlayerPlayedWithProPlayerTypeQueryBuilder playerPlayedWithProPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("casters", alias, playerPlayedWithProPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptCasters()
        {
            return ExceptField("casters");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithTeams(PlayerPlayedWithProTeamTypeQueryBuilder playerPlayedWithProTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, playerPlayedWithProTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithInternationalWinners(PlayerPlayedWithProTeamTypeQueryBuilder playerPlayedWithProTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("internationalWinners", alias, playerPlayedWithProTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptInternationalWinners()
        {
            return ExceptField("internationalWinners");
        }
    }
}
