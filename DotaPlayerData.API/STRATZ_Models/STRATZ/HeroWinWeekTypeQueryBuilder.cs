// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroWinWeekTypeQueryBuilder : GraphQlQueryBuilder<HeroWinWeekTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "week", IsComplex = true },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "durationMinute", IsComplex = true },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinWeekType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinWeekTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroWinWeekTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinWeekTypeQueryBuilder WithDurationMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptDurationMinute()
        {
            return ExceptField("durationMinute");
        }

        public HeroWinWeekTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinWeekTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }
}
