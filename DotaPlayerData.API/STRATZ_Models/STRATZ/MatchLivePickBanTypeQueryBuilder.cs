// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchLivePickBanTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePickBanTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "isPick" },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "order" },
                new FieldMetadata { Name = "bannedHeroId", IsComplex = true },
                new FieldMetadata { Name = "isRadiant" },
                new FieldMetadata { Name = "baseWinRate" },
                new FieldMetadata { Name = "adjustedWinRate" },
                new FieldMetadata { Name = "letter" },
                new FieldMetadata { Name = "positionValues", IsComplex = true },
                new FieldMetadata { Name = "winRateValues", IsComplex = true },
                new FieldMetadata { Name = "durationValues", IsComplex = true },
                new FieldMetadata { Name = "position" }
            };

        protected override string TypeName { get { return "MatchLivePickBanType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePickBanTypeQueryBuilder WithIsPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptIsPick()
        {
            return ExceptField("isPick");
        }

        public MatchLivePickBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchLivePickBanTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public MatchLivePickBanTypeQueryBuilder WithBannedHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannedHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptBannedHeroId()
        {
            return ExceptField("bannedHeroId");
        }

        public MatchLivePickBanTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchLivePickBanTypeQueryBuilder WithBaseWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptBaseWinRate()
        {
            return ExceptField("baseWinRate");
        }

        public MatchLivePickBanTypeQueryBuilder WithAdjustedWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("adjustedWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptAdjustedWinRate()
        {
            return ExceptField("adjustedWinRate");
        }

        public MatchLivePickBanTypeQueryBuilder WithLetter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("letter", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptLetter()
        {
            return ExceptField("letter");
        }

        public MatchLivePickBanTypeQueryBuilder WithPositionValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptPositionValues()
        {
            return ExceptField("positionValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithWinRateValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptWinRateValues()
        {
            return ExceptField("winRateValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithDurationValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptDurationValues()
        {
            return ExceptField("durationValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }
    }
}
