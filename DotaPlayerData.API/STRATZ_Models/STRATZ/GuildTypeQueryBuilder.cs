// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class GuildTypeQueryBuilder : GraphQlQueryBuilder<GuildTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "motd" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "tag" },
                new FieldMetadata { Name = "createdDateTime", IsComplex = true },
                new FieldMetadata { Name = "language", IsComplex = true },
                new FieldMetadata { Name = "flags" },
                new FieldMetadata { Name = "logo" },
                new FieldMetadata { Name = "region", IsComplex = true },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "requiredRank", IsComplex = true },
                new FieldMetadata { Name = "primaryColor", IsComplex = true },
                new FieldMetadata { Name = "secondaryColor", IsComplex = true },
                new FieldMetadata { Name = "pattern", IsComplex = true },
                new FieldMetadata { Name = "points" },
                new FieldMetadata { Name = "pastWeeklyRank" },
                new FieldMetadata { Name = "pastWeeklyPercentile", IsComplex = true },
                new FieldMetadata { Name = "currentPercentile", IsComplex = true },
                new FieldMetadata { Name = "lastUpdateDateTime", IsComplex = true },
                new FieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(GuildMemberTypeQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "memberCount", IsComplex = true },
                new FieldMetadata { Name = "totalBattlePassLevels" },
                new FieldMetadata { Name = "rank", IsComplex = true }
            };

        protected override string TypeName { get { return "GuildType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GuildTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GuildTypeQueryBuilder WithMotd(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("motd", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMotd()
        {
            return ExceptField("motd");
        }

        public GuildTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GuildTypeQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public GuildTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public GuildTypeQueryBuilder WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("language", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public GuildTypeQueryBuilder WithFlags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flags", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptFlags()
        {
            return ExceptField("flags");
        }

        public GuildTypeQueryBuilder WithLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logo", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLogo()
        {
            return ExceptField("logo");
        }

        public GuildTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public GuildTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public GuildTypeQueryBuilder WithRequiredRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiredRank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRequiredRank()
        {
            return ExceptField("requiredRank");
        }

        public GuildTypeQueryBuilder WithPrimaryColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryColor", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPrimaryColor()
        {
            return ExceptField("primaryColor");
        }

        public GuildTypeQueryBuilder WithSecondaryColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryColor", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptSecondaryColor()
        {
            return ExceptField("secondaryColor");
        }

        public GuildTypeQueryBuilder WithPattern(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pattern", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPattern()
        {
            return ExceptField("pattern");
        }

        public GuildTypeQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public GuildTypeQueryBuilder WithPastWeeklyRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pastWeeklyRank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPastWeeklyRank()
        {
            return ExceptField("pastWeeklyRank");
        }

        public GuildTypeQueryBuilder WithPastWeeklyPercentile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pastWeeklyPercentile", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPastWeeklyPercentile()
        {
            return ExceptField("pastWeeklyPercentile");
        }

        public GuildTypeQueryBuilder WithCurrentPercentile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentPercentile", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptCurrentPercentile()
        {
            return ExceptField("currentPercentile");
        }

        public GuildTypeQueryBuilder WithLastUpdateDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdateDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLastUpdateDateTime()
        {
            return ExceptField("lastUpdateDateTime");
        }

        public GuildTypeQueryBuilder WithMembers(GuildMemberTypeQueryBuilder guildMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("members", alias, guildMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public GuildTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public GuildTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public GuildTypeQueryBuilder WithMemberCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("memberCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMemberCount()
        {
            return ExceptField("memberCount");
        }

        public GuildTypeQueryBuilder WithTotalBattlePassLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalBattlePassLevels", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptTotalBattlePassLevels()
        {
            return ExceptField("totalBattlePassLevels");
        }

        public GuildTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }
    }
}
