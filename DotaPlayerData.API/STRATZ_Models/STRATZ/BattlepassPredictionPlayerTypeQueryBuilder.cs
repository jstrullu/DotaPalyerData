// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class BattlepassPredictionPlayerTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionPlayerTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "steamAccountId" },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "killAvg" },
                new FieldMetadata { Name = "mostKills" },
                new FieldMetadata { Name = "deathAvg" },
                new FieldMetadata { Name = "assistAvg" },
                new FieldMetadata { Name = "mostAssists" },
                new FieldMetadata { Name = "lastHitAvg" },
                new FieldMetadata { Name = "mostLastHits" },
                new FieldMetadata { Name = "mostGoldPerMinute" },
                new FieldMetadata { Name = "goldPerMinuteAvg" },
                new FieldMetadata { Name = "heroCount" }
            };

        protected override string TypeName { get { return "BattlepassPredictionPlayerType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithKillAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptKillAvg()
        {
            return ExceptField("killAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostKills", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostKills()
        {
            return ExceptField("mostKills");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithDeathAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptDeathAvg()
        {
            return ExceptField("deathAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithAssistAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptAssistAvg()
        {
            return ExceptField("assistAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostAssists()
        {
            return ExceptField("mostAssists");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithLastHitAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptLastHitAvg()
        {
            return ExceptField("lastHitAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostLastHits()
        {
            return ExceptField("mostLastHits");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostGoldPerMinute()
        {
            return ExceptField("mostGoldPerMinute");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithGoldPerMinuteAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinuteAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptGoldPerMinuteAvg()
        {
            return ExceptField("goldPerMinuteAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithHeroCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptHeroCount()
        {
            return ExceptField("heroCount");
        }
    }
}
