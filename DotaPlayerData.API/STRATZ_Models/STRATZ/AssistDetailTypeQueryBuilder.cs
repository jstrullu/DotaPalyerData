// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class AssistDetailTypeQueryBuilder : GraphQlQueryBuilder<AssistDetailTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "time" },
                new FieldMetadata { Name = "attacker", IsComplex = true },
                new FieldMetadata { Name = "target", IsComplex = true },
                new FieldMetadata { Name = "gold" },
                new FieldMetadata { Name = "xp" },
                new FieldMetadata { Name = "subTime" },
                new FieldMetadata { Name = "positionX" },
                new FieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "AssistDetailType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AssistDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public AssistDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public AssistDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public AssistDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public AssistDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public AssistDetailTypeQueryBuilder WithSubTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptSubTime()
        {
            return ExceptField("subTime");
        }

        public AssistDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public AssistDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }
}
