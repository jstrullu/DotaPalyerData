// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LiveQueryQueryBuilder : GraphQlQueryBuilder<LiveQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveQuery"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveQueryQueryBuilder WithMatch(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<object> id, QueryBuilderParameter<int?> skipPlaybackDuration = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (skipPlaybackDuration != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skipPlaybackDuration", ArgumentValue = skipPlaybackDuration} );

            return WithObjectField("match", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LiveQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveQueryQueryBuilder WithMatches(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<MatchLiveRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("matches", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LiveQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }
    }
}
