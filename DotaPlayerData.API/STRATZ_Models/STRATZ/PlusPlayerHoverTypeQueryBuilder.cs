// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlusPlayerHoverTypeQueryBuilder : GraphQlQueryBuilder<PlusPlayerHoverTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "matchCount" },
                new FieldMetadata { Name = "winCount" },
                new FieldMetadata { Name = "coreCount" },
                new FieldMetadata { Name = "supportCount" },
                new FieldMetadata { Name = "imp" },
                new FieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverHeroTypeQueryBuilder) },
                new FieldMetadata { Name = "activity", IsComplex = true },
                new FieldMetadata { Name = "languageCode", IsComplex = true },
                new FieldMetadata { Name = "friends", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "enemies", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverPlayerTypeQueryBuilder) },
                new FieldMetadata { Name = "lastMatchDateTime", IsComplex = true },
                new FieldMetadata { Name = "heroesExperience", IsComplex = true },
                new FieldMetadata { Name = "behaviorScore", IsComplex = true }
            };

        protected override string TypeName { get { return "PlusPlayerHoverType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusPlayerHoverTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithCoreCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coreCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptCoreCount()
        {
            return ExceptField("coreCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithSupportCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptSupportCount()
        {
            return ExceptField("supportCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlusPlayerHoverTypeQueryBuilder WithHeroes(PlusPlayerHoverHeroTypeQueryBuilder plusPlayerHoverHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, plusPlayerHoverHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public PlusPlayerHoverTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public PlusPlayerHoverTypeQueryBuilder WithLanguageCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageCode", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptLanguageCode()
        {
            return ExceptField("languageCode");
        }

        public PlusPlayerHoverTypeQueryBuilder WithFriends(PlusPlayerHoverPlayerTypeQueryBuilder plusPlayerHoverPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("friends", alias, plusPlayerHoverPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptFriends()
        {
            return ExceptField("friends");
        }

        public PlusPlayerHoverTypeQueryBuilder WithEnemies(PlusPlayerHoverPlayerTypeQueryBuilder plusPlayerHoverPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("enemies", alias, plusPlayerHoverPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptEnemies()
        {
            return ExceptField("enemies");
        }

        public PlusPlayerHoverTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public PlusPlayerHoverTypeQueryBuilder WithHeroesExperience(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroesExperience", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptHeroesExperience()
        {
            return ExceptField("heroesExperience");
        }

        public PlusPlayerHoverTypeQueryBuilder WithBehaviorScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorScore", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptBehaviorScore()
        {
            return ExceptField("behaviorScore");
        }
    }
}
