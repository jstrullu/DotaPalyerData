// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class SearchTypeQueryBuilder : GraphQlQueryBuilder<SearchTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new FieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new FieldMetadata { Name = "proPlayers", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "casters", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new FieldMetadata { Name = "direTideMatches", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SearchType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SearchTypeQueryBuilder WithPlayers(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public SearchTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public SearchTypeQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public SearchTypeQueryBuilder WithTeams(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public SearchTypeQueryBuilder WithProPlayers(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("proPlayers", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptProPlayers()
        {
            return ExceptField("proPlayers");
        }

        public SearchTypeQueryBuilder WithCasters(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("casters", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptCasters()
        {
            return ExceptField("casters");
        }

        public SearchTypeQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public SearchTypeQueryBuilder WithDireTideMatches(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTideMatches", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptDireTideMatches()
        {
            return ExceptField("direTideMatches");
        }
    }
}
